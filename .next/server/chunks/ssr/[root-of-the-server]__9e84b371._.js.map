{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-voice-response-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview A voice agent flow that responds to user queries and can navigate the site.\n *\n * - generateVoiceResponse - A function that handles the voice agent's response generation.\n * - VoiceAgentInput - The input type for the voice agent.\n * - VoiceAgentOutput - The return type for the voice agent, now including an optional navigation path.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\nconst VoiceAgentInputSchema = z.object({\n  query: z.string().describe(\"The user's spoken query, transcribed to text.\"),\n});\nexport type VoiceAgentInput = z.infer<typeof VoiceAgentInputSchema>;\n\nconst VoiceAgentOutputSchema = z.object({\n  response: z.string().describe(\"The AI's text response to be spoken back to the user.\"),\n  navigationPath: z.string().nullable().optional().describe(\"An optional path to navigate to on the website (e.g., '/awards', '/meal-planner'). Should be null or omitted if no navigation is required.\"),\n});\nexport type VoiceAgentOutput = z.infer<typeof VoiceAgentOutputSchema>;\n\n// Define valid navigation paths\nconst validPaths = [\n    '/', '/personal-training', '/burn-off-bootcamp', '/awards', \n    '/lifestyle-magazine', '/public-speaking', '/equipment-services', '/#contact',\n    '/meal-planner', '/Smart Scan', '/global-connect', '/community', '/profile', \n    '/privacy-policy', '/terms-of-service', '/corporate-wellness', '/marketplace'\n] as const;\n\n// Define the navigation tool\nconst navigateToPage = ai.defineTool(\n    {\n      name: 'navigateToPage',\n      description: 'Use this tool to navigate the user to a specific page on the SR Fitness website when they ask to go somewhere. Use it for requests like \"go to\", \"take me to\", \"open\", \"show me\", etc.',\n      inputSchema: z.object({\n        path: z.enum(validPaths).describe(\"The page path to navigate to.\"),\n        pageName: z.string().describe(\"The friendly name of the page for confirmation message, e.g., 'the awards page', 'your profile'.\")\n      }),\n      outputSchema: z.string(),\n    },\n    async ({ path }) => `Navigating to ${path}`\n);\n\n\nexport async function generateVoiceResponse(input: VoiceAgentInput): Promise<VoiceAgentOutput> {\n  return generateVoiceResponseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'voiceAgentPrompt',\n  input: { schema: VoiceAgentInputSchema },\n  output: { schema: VoiceAgentOutputSchema },\n  tools: [navigateToPage],\n  prompt: `You are Ninna, a friendly and helpful voice assistant for the SR Fitness application.\nYour role is to answer user questions about fitness, nutrition, our services, or general inquiries.\nIf the user asks to navigate to a page (e.g., \"go to\", \"open\", \"show me\"), you MUST use the navigateToPage tool.\nIf you are not navigating, provide a helpful text response and ensure the navigationPath is null.\nBe conversational, encouraging, and keep your answers concise and clear, as they will be spoken aloud.\nIf you don't know an answer, say so politely.\n\nUser query: {{{query}}}\n  `,\n});\n\nconst generateVoiceResponseFlow = ai.defineFlow(\n  {\n    name: 'generateVoiceResponseFlow',\n    inputSchema: VoiceAgentInputSchema,\n    outputSchema: VoiceAgentOutputSchema,\n  },\n  async (input) => {\n    const response = await prompt(input);\n\n    // 1. Check for tool calls first\n    const toolCalls = response.toolCalls;\n    if (toolCalls && toolCalls.length > 0) {\n        const navigateCall = toolCalls.find(call => call.tool === 'navigateToPage');\n        if (navigateCall) {\n            const { path, pageName } = navigateCall.input as { path: string; pageName: string };\n            return {\n                response: `Of course, taking you to ${pageName} now.`,\n                navigationPath: path,\n            };\n        }\n    }\n    \n    // 2. If no tool call, check for structured output\n    const output = response.output;\n    if (output) {\n      return {\n          response: output.response,\n          navigationPath: output.navigationPath || null\n      };\n    }\n\n    // 3. If no structured output, check for a simple text response as a fallback\n    const text = response.text;\n    if (text) {\n        return {\n            response: text,\n            navigationPath: null\n        };\n    }\n\n    // 4. Fallback if we have neither tool calls, structured output, nor text\n    return { response: \"I'm sorry, I had a problem thinking of a response. Please try again.\", navigationPath: null };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wBAAwB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAGA,MAAM,yBAAyB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC5D;AAGA,gCAAgC;AAChC,MAAM,aAAa;IACf;IAAK;IAAsB;IAAsB;IACjD;IAAuB;IAAoB;IAAuB;IAClE;IAAiB;IAAe;IAAmB;IAAc;IACjE;IAAmB;IAAqB;IAAuB;CAClE;AAED,6BAA6B;AAC7B,MAAM,iBAAiB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAChC;IACE,MAAM;IACN,aAAa;IACb,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACpB,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC,YAAY,QAAQ,CAAC;QAClC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC;IACA,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;AACxB,GACA,OAAO,EAAE,IAAI,EAAE,GAAK,CAAC,cAAc,EAAE,MAAM;AAIxC,eAAe,sBAAsB,KAAsB;IAChE,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAE,QAAQ;IAAsB;IACvC,QAAQ;QAAE,QAAQ;IAAuB;IACzC,OAAO;QAAC;KAAe;IACvB,QAAQ,CAAC;;;;;;;;EAQT,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,WAAW,MAAM,OAAO;IAE9B,gCAAgC;IAChC,MAAM,YAAY,SAAS,SAAS;IACpC,IAAI,aAAa,UAAU,MAAM,GAAG,GAAG;QACnC,MAAM,eAAe,UAAU,IAAI,CAAC,CAAA,OAAQ,KAAK,IAAI,KAAK;QAC1D,IAAI,cAAc;YACd,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,aAAa,KAAK;YAC7C,OAAO;gBACH,UAAU,CAAC,yBAAyB,EAAE,SAAS,KAAK,CAAC;gBACrD,gBAAgB;YACpB;QACJ;IACJ;IAEA,kDAAkD;IAClD,MAAM,SAAS,SAAS,MAAM;IAC9B,IAAI,QAAQ;QACV,OAAO;YACH,UAAU,OAAO,QAAQ;YACzB,gBAAgB,OAAO,cAAc,IAAI;QAC7C;IACF;IAEA,6EAA6E;IAC7E,MAAM,OAAO,SAAS,IAAI;IAC1B,IAAI,MAAM;QACN,OAAO;YACH,UAAU;YACV,gBAAgB;QACpB;IACJ;IAEA,yEAAyE;IACzE,OAAO;QAAE,UAAU;QAAwE,gBAAgB;IAAK;AAClH;;;IA9DoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/generate-speech-audio-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Converts text to speech audio.\n *\n * - generateSpeechAudio - Converts text into a WAV audio data URI.\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\nimport wav from 'wav';\nimport { googleAI } from '@genkit-ai/googleai';\n\n// This is the exported function React components will call.\nexport async function generateSpeechAudio(text: string): Promise<string> {\n  return generateSpeechAudioFlow(text);\n}\n\nconst generateSpeechAudioFlow = ai.defineFlow(\n  {\n    name: 'generateSpeechAudioFlow',\n    inputSchema: z.string(),\n    outputSchema: z.string(), // data URI\n  },\n  async (text) => {\n    if (!text.trim()) {\n      return '';\n    }\n\n    const { media } = await ai.generate({\n      model: googleAI.model('gemini-2.5-flash-preview-tts'),\n      config: {\n        responseModalities: ['AUDIO'],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: { voiceName: 'Umbriel' }, // Updated to a valid female-sounding voice\n          },\n        },\n      },\n      prompt: text,\n    });\n\n    if (!media) {\n      throw new Error('No audio media was returned from the TTS model.');\n    }\n\n    // The media URL is a data URI with raw PCM data\n    // Format: 'data:audio/L16;rate=24000;channels=1;base64,....'\n    const audioBuffer = Buffer.from(\n      media.url.substring(media.url.indexOf(',') + 1),\n      'base64'\n    );\n    \n    const wavDataUri = await toWavDataUri(audioBuffer);\n    return wavDataUri;\n  }\n);\n\n// Helper function to convert raw PCM audio buffer to a WAV data URI\nasync function toWavDataUri(\n  pcmData: Buffer,\n  channels = 1,\n  rate = 24000,\n  sampleWidth = 2\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n\n    const buffers: Buffer[] = [];\n    writer.on('data', (chunk) => {\n      buffers.push(chunk);\n    });\n    writer.on('end', () => {\n      const wavBuffer = Buffer.concat(buffers);\n      resolve(`data:audio/wav;base64,${wavBuffer.toString('base64')}`);\n    });\n    writer.on('error', reject);\n\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n"],"names":[],"mappings":";;;;;AAEA;;;;CAIC,GAED;AACA;AAAA;AACA;AACA;AAAA;;;;;;;;AAGO,eAAe,oBAAoB,IAAY;IACpD,OAAO,wBAAwB;AACjC;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM;IACrB,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM;AACxB,GACA,OAAO;IACL,IAAI,CAAC,KAAK,IAAI,IAAI;QAChB,OAAO;IACT;IAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QAClC,OAAO,2KAAA,CAAA,WAAQ,CAAC,KAAK,CAAC;QACtB,QAAQ;YACN,oBAAoB;gBAAC;aAAQ;YAC7B,cAAc;gBACZ,aAAa;oBACX,qBAAqB;wBAAE,WAAW;oBAAU;gBAC9C;YACF;QACF;QACA,QAAQ;IACV;IAEA,IAAI,CAAC,OAAO;QACV,MAAM,IAAI,MAAM;IAClB;IAEA,gDAAgD;IAChD,6DAA6D;IAC7D,MAAM,cAAc,OAAO,IAAI,CAC7B,MAAM,GAAG,CAAC,SAAS,CAAC,MAAM,GAAG,CAAC,OAAO,CAAC,OAAO,IAC7C;IAGF,MAAM,aAAa,MAAM,aAAa;IACtC,OAAO;AACT;AAGF,oEAAoE;AACpE,eAAe,aACb,OAAe,EACf,WAAW,CAAC,EACZ,OAAO,KAAK,EACZ,cAAc,CAAC;IAEf,OAAO,IAAI,QAAQ,CAAC,SAAS;QAC3B,MAAM,SAAS,IAAI,4HAAA,CAAA,UAAG,CAAC,MAAM,CAAC;YAC5B;YACA,YAAY;YACZ,UAAU,cAAc;QAC1B;QAEA,MAAM,UAAoB,EAAE;QAC5B,OAAO,EAAE,CAAC,QAAQ,CAAC;YACjB,QAAQ,IAAI,CAAC;QACf;QACA,OAAO,EAAE,CAAC,OAAO;YACf,MAAM,YAAY,OAAO,MAAM,CAAC;YAChC,QAAQ,CAAC,sBAAsB,EAAE,UAAU,QAAQ,CAAC,WAAW;QACjE;QACA,OAAO,EAAE,CAAC,SAAS;QAEnB,OAAO,KAAK,CAAC;QACb,OAAO,GAAG;IACZ;AACF;;;IAvEsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 481, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/lib/firebase/config.ts"],"sourcesContent":["\nimport { initializeApp, getApps, getApp } from 'firebase/app';\nimport { getFirestore } from 'firebase/firestore';\n\n// Your web app's Firebase configuration\n// IMPORTANT: Do not remove or modify this object.\nconst firebaseConfig = {\n  projectId: \"sr-fitness-idcxl\",\n  appId: \"1:208349550507:web:a0e1f3f994e7134581a4ee\",\n  storageBucket: \"sr-fitness-idcxl.firebasestorage.app\",\n  apiKey: \"AIzaSyBtNrQdRpSWVBeQSwZGszZoaX-HaQm9ne4\",\n  authDomain: \"sr-fitness-idcxl.firebaseapp.com\",\n  measurementId: \"G-ZSHZD6ZLPY\",\n  messagingSenderId: \"208349550507\"\n};\n\n// Initialize Firebase\nconst app = getApps().length ? getApp() : initializeApp(firebaseConfig);\nconst db = getFirestore(app);\n\nexport { app, db };\n"],"names":[],"mappings":";;;;AACA;AAAA;AACA;AAAA;;;AAEA,wCAAwC;AACxC,kDAAkD;AAClD,MAAM,iBAAiB;IACrB,WAAW;IACX,OAAO;IACP,eAAe;IACf,QAAQ;IACR,YAAY;IACZ,eAAe;IACf,mBAAmB;AACrB;AAEA,sBAAsB;AACtB,MAAM,MAAM,CAAA,GAAA,oLAAA,CAAA,UAAO,AAAD,IAAI,MAAM,GAAG,CAAA,GAAA,oLAAA,CAAA,SAAM,AAAD,MAAM,CAAA,GAAA,oLAAA,CAAA,gBAAa,AAAD,EAAE;AACxD,MAAM,KAAK,CAAA,GAAA,iKAAA,CAAA,eAAY,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 512, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/services/firestore.ts"],"sourcesContent":["\nimport { db } from '@/lib/firebase/config';\nimport { collection, addDoc, getDocs, deleteDoc, doc, query, orderBy, serverTimestamp, getDoc } from 'firebase/firestore';\n\n// --------- Blog Post Types and Functions ---------\n\ninterface Post {\n  id?: string;\n  author: { name: string; avatar: string; dataAiHint: string; };\n  timestamp: any; // Firestore timestamp\n  title: string;\n  content: string;\n  image: string;\n  dataAiHint: string;\n  likes: number;\n  comments: number;\n  isAnnouncement: boolean;\n  category: string;\n}\n\nconst postsCollectionRef = collection(db, 'blogPosts');\n\nexport const addPost = async (postData: Omit<Post, 'id' | 'timestamp'>) => {\n  try {\n    await addDoc(postsCollectionRef, {\n      ...postData,\n      timestamp: serverTimestamp(),\n    });\n  } catch (error) {\n    console.error(\"Error adding document: \", error);\n    throw new Error(\"Could not add post to Firestore.\");\n  }\n};\n\nexport const getPosts = async (): Promise<Post[]> => {\n  try {\n    const q = query(postsCollectionRef, orderBy('timestamp', 'desc'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n            id: doc.id,\n            ...data,\n            timestamp: data.timestamp?.toDate().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) || new Date().toLocaleDateString(),\n        } as Post;\n    });\n  } catch (error) {\n    console.error(\"Error getting documents: \", error);\n    throw new Error(\"Could not fetch posts from Firestore.\");\n  }\n};\n\nexport const deletePost = async (postId: string) => {\n  try {\n    await deleteDoc(doc(db, 'blogPosts', postId));\n  } catch (error) {\n    console.error(\"Error deleting document: \", error);\n    throw new Error(\"Could not delete post from Firestore.\");\n  }\n};\n\n\n// --------- Product Types and Functions ---------\n\nexport interface Product {\n    id?: string;\n    name: string;\n    category: string;\n    price: number;\n    image: string;\n    dataAiHint: string;\n    rating: number;\n    isNew: boolean;\n    timestamp: any;\n}\n\nconst productsCollectionRef = collection(db, 'products');\n\nexport const addProduct = async (productData: Omit<Product, 'id' | 'timestamp'>) => {\n    try {\n        await addDoc(productsCollectionRef, {\n            ...productData,\n            timestamp: serverTimestamp(),\n        });\n    } catch (error) {\n        console.error(\"Error adding product: \", error);\n        throw new Error(\"Could not add product to Firestore.\");\n    }\n};\n\nexport const getProducts = async (): Promise<Product[]> => {\n    try {\n        const q = query(productsCollectionRef, orderBy('timestamp', 'desc'));\n        const querySnapshot = await getDocs(q);\n        return querySnapshot.docs.map(doc => ({\n            id: doc.id,\n            ...doc.data(),\n        } as Product));\n    } catch (error) {\n        console.error(\"Error getting products: \", error);\n        throw new Error(\"Could not fetch products from Firestore.\");\n    }\n};\n\nexport const deleteProduct = async (productId: string) => {\n    try {\n        await deleteDoc(doc(db, 'products', productId));\n    } catch (error) {\n        console.error(\"Error deleting product: \", error);\n        throw new Error(\"Could not delete product from Firestore.\");\n    }\n};\n\n\n// --------- Magazine Article Types and Functions ---------\n\nexport interface Article {\n  id?: string;\n  title: string;\n  category: string;\n  image: string;\n  dataAiHint: string;\n  excerpt: string;\n  timestamp: any;\n}\n\nconst articlesCollectionRef = collection(db, 'magazineArticles');\n\nexport const addArticle = async (articleData: Omit<Article, 'id' | 'timestamp'>) => {\n  try {\n    await addDoc(articlesCollectionRef, {\n        ...articleData,\n        timestamp: serverTimestamp()\n    });\n  } catch (error) {\n    console.error(\"Error adding article: \", error);\n    throw new Error(\"Could not add article to Firestore.\");\n  }\n};\n\nexport const getArticles = async (): Promise<Article[]> => {\n  try {\n    const q = query(articlesCollectionRef, orderBy('timestamp', 'desc'));\n    const querySnapshot = await getDocs(q);\n    return querySnapshot.docs.map(doc => {\n      const data = doc.data();\n      return {\n        id: doc.id,\n        ...data,\n        timestamp: data.timestamp?.toDate().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric' }) || new Date().toLocaleDateString(),\n      } as Article;\n    });\n  } catch (error) {\n    console.error(\"Error getting articles: \", error);\n    throw new Error(\"Could not fetch articles from Firestore.\");\n  }\n};\n\nexport const deleteArticle = async (articleId: string) => {\n  try {\n    await deleteDoc(doc(db, 'magazineArticles', articleId));\n  } catch (error) {\n    console.error(\"Error deleting article: \", error);\n    throw new Error(\"Could not delete article from Firestore.\");\n  }\n};\n\n\n// --------- Vote Types and Functions ---------\n\nexport interface Vote {\n    id?: string;\n    contestantId: string;\n    contestantName: string;\n    contestantCategory: string;\n    numberOfVotes: number;\n    timestamp: any;\n}\n\nconst votesCollectionRef = collection(db, 'votes');\n\nexport const addVote = async (voteData: Omit<Vote, 'id' | 'timestamp'>) => {\n    try {\n        await addDoc(votesCollectionRef, {\n            ...voteData,\n            timestamp: serverTimestamp(),\n        });\n    } catch (error) {\n        console.error(\"Error adding vote: \", error);\n        throw new Error(\"Could not add vote to Firestore.\");\n    }\n};\n\nexport const getVotes = async (): Promise<Vote[]> => {\n    try {\n        const q = query(votesCollectionRef, orderBy('timestamp', 'desc'));\n        const querySnapshot = await getDocs(q);\n        return querySnapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data,\n            timestamp: data.timestamp?.toDate().toLocaleDateString('en-US', { month: 'short', day: 'numeric' }) || 'N/A',\n          } as Vote\n        });\n    } catch (error) {\n        console.error(\"Error getting votes: \", error);\n        throw new Error(\"Could not fetch votes from Firestore.\");\n    }\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 683, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { addVote } from '@/services/firestore';\n\n// Explicitly read environment variables at the top level\nconst WEMA_ALAT_SUBSCRIPTION_KEY = process.env.WEMA_ALAT_SUBSCRIPTION_KEY;\nconst WEMA_ALAT_SOURCE_ACCOUNT = process.env.WEMA_ALAT_SOURCE_ACCOUNT;\nconst WEMA_ALAT_CHANNEL_ID = process.env.WEMA_ALAT_CHANNEL_ID;\nconst NEXT_PUBLIC_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;\n\n\nconst nominationFormSchema = z.object({\n  category: z.string(),\n  nomineeName: z.string(),\n  nomineePhone: z.string(),\n  nominationReason: z.string(),\n  nominatorName: z.string(),\n  nominatorPhone: z.string(),\n});\n\nconst voteSchema = z.object({\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number().int().positive(),\n});\n\nconst wemaPaymentStatusSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n});\n\nconst wemaPaymentRequestSchema = z.object({\n  amount: z.number(),\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number(),\n});\n\nconst wemaPaymentValidationSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n  platformTransactionReference: z.string(),\n  otp: z.string(),\n});\n\nconst remitaPaymentRequestSchema = z.object({\n    amount: z.number(),\n    charge: z.number(),\n    transactionReference: z.string(),\n    customerEmail: z.string().email(),\n    customerName: z.string(),\n    customerPhoneNumber: z.string(),\n    description: z.string(),\n});\n\nconst remitaReceiptSchema = z.object({\n  rrr: z.string(),\n});\n\nconst remitaRrrValidationSchema = z.object({\n  rrr: z.string(),\n  channelId: z.string(),\n});\n\n\nexport async function sendNominationEmail(formData: z.infer<typeof nominationFormSchema>) {\n  \n  // 1. Validate the data on the server\n  const validatedFields = nominationFormSchema.safeParse(formData);\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid form data.',\n    };\n  }\n\n  const { category, nomineeName, nomineePhone, nominationReason, nominatorName, nominatorPhone } = validatedFields.data;\n\n  // 2. Log the data to the server console (this will work without any setup)\n  console.log('New Nomination Received:');\n  console.log({\n    category,\n    nomineeName,\n    nomineePhone,\n    nominationReason,\n    nominatorName,\n    nominatorPhone,\n  });\n\n  try {\n    return { success: true };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    return {\n      success: false,\n      error: 'Sorry, we couldn\\'t submit your nomination at this time.',\n    };\n  }\n}\n\nexport async function recordVote(voteData: z.infer<typeof voteSchema>) {\n  const validatedFields = voteSchema.safeParse(voteData);\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid vote data provided.',\n    };\n  }\n\n  try {\n    await addVote(validatedFields.data);\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to record vote in Server Action: \", error);\n    return {\n      success: false,\n      error: 'There was an error recording your vote to the database.'\n    };\n  }\n}\n\nexport async function createWemaAlatPayment(paymentData: z.infer<typeof wemaPaymentRequestSchema>) {\n  const validatedFields = wemaPaymentRequestSchema.safeParse(paymentData);\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid payment data provided.' };\n  }\n  \n  if (!WEMA_ALAT_SUBSCRIPTION_KEY || !WEMA_ALAT_SOURCE_ACCOUNT || !WEMA_ALAT_CHANNEL_ID) {\n    console.error(\"Wema Alat environment variables are not set.\");\n    return { success: false, error: \"Payment gateway is not configured correctly.\" };\n  }\n\n  const { amount, contestantId, contestantName, contestantCategory, numberOfVotes } = validatedFields.data;\n\n  const transactionReference = `SRF-VOTE-${contestantId}-${Date.now()}`;\n  const narration = `Vote for ${contestantName} in ${contestantCategory}`;\n\n  const body = {\n    amount: amount,\n    sourceAccountNumber: WEMA_ALAT_SOURCE_ACCOUNT,\n    channelId: WEMA_ALAT_CHANNEL_ID,\n    narration: narration,\n    transactionReference: transactionReference\n  };\n\n  try {\n    const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-request', {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n        'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n      }\n    });\n    \n    const responseText = await response.text();\n    console.log(\"Wema Alat transfer-fund-request response status:\", response.status);\n    console.log(\"Wema Alat transfer-fund-request response body:\", responseText);\n\n    if (response.ok) {\n        try {\n            const data = JSON.parse(responseText);\n            // Assuming the platformTransactionReference is in the response body.\n            // This may need to adjustment based on the actual API response structure.\n            return {\n                success: true,\n                message: \"Payment initiated. Please enter OTP.\",\n                data: {\n                    platformTransactionReference: data.platformTransactionReference, // Adjust this key based on actual response\n                    transactionReference: transactionReference,\n                    channelId: WEMA_ALAT_CHANNEL_ID,\n                }\n            };\n        } catch (e) {\n            console.error(\"Failed to parse JSON from Wema Alat response\", e);\n             return { success: false, error: `Received an unreadable response from payment gateway: ${responseText}` };\n        }\n    } else {\n       return { success: false, error: `Payment initiation failed: ${responseText}`, status: response.status };\n    }\n\n  } catch (error) {\n    console.error(\"Error calling Wema Alat API:\", error);\n    return { success: false, error: \"Could not connect to the payment gateway.\" };\n  }\n}\n\nexport async function validateWemaAlatPayment(validationData: z.infer<typeof wemaPaymentValidationSchema>) {\n    const validatedFields = wemaPaymentValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid validation data provided.' };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { channelId, transactionReference, platformTransactionReference, otp } = validatedFields.data;\n\n    const body = {\n        channelId,\n        transactionReference,\n        platformTransactionReference,\n        otp,\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-validation', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Wema Alat transfer-fund-validation response status:\", response.status);\n        console.log(\"Wema Alat transfer-fund-validation response body:\", responseText);\n        \n        if(response.ok) {\n            return { success: true, message: \"Payment validated successfully!\" };\n        } else {\n            return { success: false, error: `OTP validation failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Wema Alat validation API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway for validation.\" };\n    }\n}\n\n\nexport async function checkWemaAlatTransactionStatus(statusData: z.infer<typeof wemaPaymentStatusSchema>) {\n    const validatedFields = wemaPaymentStatusSchema.safeParse(statusData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid transaction data' };\n    }\n\n    const { channelId, transactionReference } = validatedFields.data;\n\n    const wemaAlatUrl = `https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/CheckTransactionStatus/${channelId}/${transactionReference}`;\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set in environment variables.\");\n        return { success: false, error: \"Payment gateway is not configured.\" };\n    }\n    \n    try {\n        const response = await fetch(wemaAlatUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const resultText = await response.text();\n        const resultStatus = response.status;\n        console.log('Wema Alat Status:', resultStatus);\n        console.log('Wema Alat Response:', resultText);\n\n        if (response.ok) {\n            // Assuming a 200 OK response means success. You might need to adjust based on the actual API response content.\n            return { success: true, status: resultStatus, data: resultText };\n        } else {\n            return { success: false, error: `Failed to check transaction status: ${resultText}`, status: resultStatus };\n        }\n\n    } catch (error) {\n        console.error(\"Error calling Wema Alat API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway.\" };\n    }\n}\n\n\nexport async function createRemitaPayment(paymentData: z.infer<typeof remitaPaymentRequestSchema>) {\n    const validatedFields = remitaPaymentRequestSchema.safeParse(paymentData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita payment data.\" };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Remita subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { amount, charge, transactionReference, customerEmail, customerName, customerPhoneNumber, description } = validatedFields.data;\n\n    const body = {\n        channelId: \"string\", // Placeholder\n        cif: \"string\", // Placeholder\n        customerAccount: \"string\", // Placeholder\n        amount: amount,\n        charge: charge,\n        transactionReference: transactionReference,\n        customerEmail: customerEmail,\n        customerPhoneNumber: customerPhoneNumber,\n        customerName: customerName,\n        rrr: \"string\", // Placeholder\n        payerEmail: customerEmail,\n        payerName: customerName,\n        payerNumber: customerPhoneNumber,\n        description: description,\n        billAuthOptions: {\n            pin: \"string\",\n            otp: \"string\",\n            biometricPolicy: \"string\",\n            biometricToken: \"string\",\n            platformTransactionReference: \"string\",\n            authenticationType: 0\n        }\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PayRemitaBill', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PayRemitaBill response status:\", response.status);\n        console.log(\"Remita PayRemitaBill response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita payment processed successfully.\", data: JSON.parse(responseText) };\n        } else {\n             if (response.status === 500) {\n                 return { success: false, error: `Remita payment failed due to an internal server error on the gateway. Please try again later or contact support.` };\n             }\n            return { success: false, error: `Remita payment failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PayRemitaBill API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway.\" };\n    }\n}\n\nexport async function printRemitaReceipt(receiptData: z.infer<typeof remitaReceiptSchema>) {\n    const validatedFields = remitaReceiptSchema.safeParse(receiptData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita receipt data.\" };\n    }\n\n    const { rrr } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PrintRemitaReceipt/${rrr}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PrintRemitaReceipt response status:\", response.status);\n        console.log(\"Remita PrintRemitaReceipt response body:\", responseText);\n        \n        if (response.ok) {\n            // Depending on what the API returns (e.g., HTML, a URL to a PDF),\n            // this response will need to be handled by the client.\n            // For now, we'll just return the text content.\n            return { success: true, receiptData: responseText };\n        } else {\n            return { success: false, error: `Failed to fetch Remita receipt: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PrintRemitaReceipt API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to print receipt.\" };\n    }\n}\n\n\nexport async function validateRemitaRrr(validationData: z.infer<typeof remitaRrrValidationSchema>) {\n    const validatedFields = remitaRrrValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita RRR validation data.\" };\n    }\n\n    const { rrr, channelId } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/ValidateRrr/${rrr}/${channelId}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita ValidateRrr response status:\", response.status);\n        console.log(\"Remita ValidateRrr response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita RRR validated successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Failed to validate Remita RRR: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita ValidateRrr API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to validate RRR.\" };\n    }\n}\n    \n    "],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1172, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/vote/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateVoiceResponse as '40d4ef3f17cac6671f3ce0fae5b2a708376fff0fbf'} from 'ACTIONS_MODULE0'\nexport {generateSpeechAudio as '40f3233a4d6b07c47e7e48dcd2d0a4954be17da116'} from 'ACTIONS_MODULE1'\nexport {sendNominationEmail as '4074337a044cd269bb88fa2d15f93e38f7b350b297'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 1236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/vote/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/vote/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/vote/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 1250, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/vote/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/vote/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/vote/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 1264, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}