{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/features/vote/contestant-card.tsx"],"sourcesContent":["\n\"use client\";\n\nimport Image from 'next/image';\nimport { Card, CardContent, CardFooter } from '@/components/ui/card';\nimport { CheckCircle } from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nexport interface Contestant {\n    id: string;\n    name: string;\n    category: string;\n    image: string;\n    objectPosition?: string;\n    objectFit?: 'cover' | 'contain';\n}\n\ninterface ContestantCardProps {\n    contestant: Contestant;\n    isVotable: boolean;\n    isSelected?: boolean;\n    onSelect?: () => void;\n}\n\nexport default function ContestantCard({ contestant, isVotable, isSelected, onSelect }: ContestantCardProps) {\n    const cardProps = {\n        onClick: isVotable ? onSelect : undefined,\n        className: cn(\n            \"overflow-hidden bg-zinc-800 border-2 transition-all duration-200 ease-in-out relative group\",\n            isVotable && \"cursor-pointer hover:border-amber-400/50 hover:scale-105\",\n            isSelected ? \"border-amber-400 scale-105 shadow-lg shadow-amber-400/20\" : \"border-transparent\",\n            !isVotable && \"border-zinc-700\"\n        ),\n    };\n\n    return (\n        <Card {...cardProps}>\n            <CardContent className=\"p-0 aspect-square relative\">\n                <Image\n                    src={contestant.image}\n                    alt={contestant.name}\n                    layout=\"fill\"\n                    objectFit={contestant.objectFit || 'cover'}\n                    className={cn(\"transition-transform duration-300\", isVotable && \"group-hover:scale-110\")}\n                    style={{ objectPosition: contestant.objectPosition || 'center' }}\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent\" />\n                {isSelected && (\n                    <div className=\"absolute top-2 right-2 bg-amber-400 text-black rounded-full h-6 w-6 flex items-center justify-center\">\n                        <CheckCircle className=\"h-4 w-4\" />\n                    </div>\n                )}\n            </CardContent>\n            <CardFooter className=\"p-2 bg-zinc-900/80 absolute bottom-0 w-full\">\n                <div className=\"text-center w-full\">\n                    <p className=\"font-bold text-sm text-white truncate\">{contestant.name}</p>\n                    <p className=\"text-xs text-amber-400 truncate\">{contestant.category}</p>\n                </div>\n            </CardFooter>\n        </Card>\n    );\n}\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AALA;;;;;;AAuBe,SAAS,eAAe,EAAE,UAAU,EAAE,SAAS,EAAE,UAAU,EAAE,QAAQ,EAAuB;IACvG,MAAM,YAAY;QACd,SAAS,YAAY,WAAW;QAChC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACR,+FACA,aAAa,4DACb,aAAa,6DAA6D,sBAC1E,CAAC,aAAa;IAEtB;IAEA,qBACI,8OAAC,gIAAA,CAAA,OAAI;QAAE,GAAG,SAAS;;0BACf,8OAAC,gIAAA,CAAA,cAAW;gBAAC,WAAU;;kCACnB,8OAAC,6HAAA,CAAA,UAAK;wBACF,KAAK,WAAW,KAAK;wBACrB,KAAK,WAAW,IAAI;wBACpB,QAAO;wBACP,WAAW,WAAW,SAAS,IAAI;wBACnC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,qCAAqC,aAAa;wBAChE,OAAO;4BAAE,gBAAgB,WAAW,cAAc,IAAI;wBAAS;;;;;;kCAEnE,8OAAC;wBAAI,WAAU;;;;;;oBACd,4BACG,8OAAC;wBAAI,WAAU;kCACX,cAAA,8OAAC,2NAAA,CAAA,cAAW;4BAAC,WAAU;;;;;;;;;;;;;;;;;0BAInC,8OAAC,gIAAA,CAAA,aAAU;gBAAC,WAAU;0BAClB,cAAA,8OAAC;oBAAI,WAAU;;sCACX,8OAAC;4BAAE,WAAU;sCAAyC,WAAW,IAAI;;;;;;sCACrE,8OAAC;4BAAE,WAAU;sCAAmC,WAAW,QAAQ;;;;;;;;;;;;;;;;;;;;;;;AAKvF","debugId":null}},
    {"offset": {"line": 199, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 391, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { addVote, addNomination } from '@/services/firestore';\nimport { Resend } from 'resend';\n\n// Explicitly read environment variables at the top level\nconst WEMA_ALAT_SUBSCRIPTION_KEY = process.env.WEMA_ALAT_SUBSCRIPTION_KEY;\nconst WEMA_ALAT_SOURCE_ACCOUNT = process.env.WEMA_ALAT_SOURCE_ACCOUNT;\nconst WEMA_ALAT_CHANNEL_ID = process.env.WEMA_ALAT_CHANNEL_ID;\nconst NEXT_PUBLIC_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;\nconst RESEND_API_KEY = process.env.RESEND_API_KEY;\n\nconst nominationFormSchema = z.object({\n  category: z.string(),\n  nomineeName: z.string(),\n  nomineePhone: z.string(),\n  nominationReason: z.string(),\n  nominatorName: z.string(),\n  nominatorPhone: z.string(),\n});\n\nconst voteSchema = z.object({\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number().int().positive(),\n});\n\nconst wemaPaymentStatusSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n});\n\nconst wemaPaymentRequestSchema = z.object({\n  amount: z.number(),\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number(),\n});\n\nconst wemaPaymentValidationSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n  platformTransactionReference: z.string(),\n  otp: z.string(),\n});\n\nconst remitaPaymentRequestSchema = z.object({\n    amount: z.number(),\n    charge: z.number(),\n    transactionReference: z.string(),\n    customerEmail: z.string().email(),\n    customerName: z.string(),\n    customerPhoneNumber: z.string(),\n    description: z.string(),\n});\n\nconst remitaReceiptSchema = z.object({\n  rrr: z.string(),\n});\n\nconst remitaRrrValidationSchema = z.object({\n  rrr: z.string(),\n  channelId: z.string(),\n});\n\n\nexport async function sendNominationEmail(formData: z.infer<typeof nominationFormSchema>) {\n  const validatedFields = nominationFormSchema.safeParse(formData);\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid form data.' };\n  }\n\n  const { category, nomineeName, nomineePhone, nominationReason, nominatorName, nominatorPhone } = validatedFields.data;\n\n  // 1. Send email notification first\n  if (!RESEND_API_KEY) {\n    console.error('Resend API key is not configured.');\n    // Fail gracefully if Resend isn't set up, but still save the nomination\n    await addNomination(validatedFields.data);\n    return { success: true, message: 'Nomination submitted successfully! Email notification is currently disabled.' };\n  }\n  \n  try {\n    const resend = new Resend(RESEND_API_KEY);\n\n    const { data, error } = await resend.emails.send({\n      from: 'SR Fitness Awards <noreply@srfitness.com.ng>',\n      to: ['sampson07@outlook.com', 'srfitness247@gmail.com'],\n      subject: 'New Award Nomination Received!',\n      html: `\n          <h1>New SR Fitness Award Nomination</h1>\n          <p>A new nomination has been submitted. Here are the details:</p>\n          <h2>Nominee Details:</h2>\n          <ul>\n              <li><strong>Category:</strong> ${category}</li>\n              <li><strong>Name:</strong> ${nomineeName}</li>\n              <li><strong>Phone:</strong> ${nomineePhone}</li>\n          </ul>\n          <h2>Reason for Nomination:</h2>\n          <p>${nominationReason}</p>\n          <hr />\n          <h2>Nominator Details:</h2>\n          <ul>\n              <li><strong>Name:</strong> ${nominatorName}</li>\n              <li><strong>Phone:</strong> ${nominatorPhone}</li>\n          </ul>\n      `,\n    });\n\n    if (error) {\n      console.error('Resend API Error:', error);\n      return { success: false, error: 'Failed to send nomination email. Please try again.' };\n    }\n\n    // 2. If email is successful, save to Firestore\n    await addNomination(validatedFields.data);\n    \n    // 3. Return success response\n    return { success: true, message: 'Nomination submitted and notification email sent successfully!' };\n\n  } catch (error) {\n    console.error('An unexpected error occurred in sendNominationEmail:', error);\n    return {\n      success: false,\n      error: 'An unexpected server error occurred. Please try again later.',\n    };\n  }\n}\n\nexport async function recordVote(voteData: z.infer<typeof voteSchema>) {\n  const validatedFields = voteSchema.safeParse(voteData);\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid vote data provided.',\n    };\n  }\n\n  try {\n    await addVote(validatedFields.data);\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to record vote in Server Action: \", error);\n    return {\n      success: false,\n      error: 'There was an error recording your vote to the database.'\n    };\n  }\n}\n\nexport async function createWemaAlatPayment(paymentData: z.infer<typeof wemaPaymentRequestSchema>) {\n  const validatedFields = wemaPaymentRequestSchema.safeParse(paymentData);\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid payment data provided.' };\n  }\n  \n  if (!WEMA_ALAT_SUBSCRIPTION_KEY || !WEMA_ALAT_SOURCE_ACCOUNT || !WEMA_ALAT_CHANNEL_ID) {\n    console.error(\"Wema Alat environment variables are not set.\");\n    return { success: false, error: \"Payment gateway is not configured correctly.\" };\n  }\n\n  const { amount, contestantId, contestantName, contestantCategory, numberOfVotes } = validatedFields.data;\n\n  const transactionReference = `SRF-VOTE-${contestantId}-${Date.now()}`;\n  const narration = `Vote for ${contestantName} in ${contestantCategory}`;\n\n  const body = {\n    amount: amount,\n    sourceAccountNumber: WEMA_ALAT_SOURCE_ACCOUNT,\n    channelId: WEMA_ALAT_CHANNEL_ID,\n    narration: narration,\n    transactionReference: transactionReference\n  };\n\n  try {\n    const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-request', {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n        'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n      }\n    });\n    \n    const responseText = await response.text();\n    console.log(\"Wema Alat transfer-fund-request response status:\", response.status);\n    console.log(\"Wema Alat transfer-fund-request response body:\", responseText);\n\n    if (response.ok) {\n        try {\n            const data = JSON.parse(responseText);\n            return {\n                success: true,\n                message: \"Payment initiated. Please enter OTP.\",\n                data: {\n                    platformTransactionReference: data.platformTransactionReference,\n                    transactionReference: transactionReference,\n                    channelId: WEMA_ALAT_CHANNEL_ID,\n                }\n            };\n        } catch (e) {\n            console.error(\"Failed to parse JSON from Wema Alat response\", e);\n             return { success: false, error: `Received an unreadable response from payment gateway: ${responseText}` };\n        }\n    } else {\n       return { success: false, error: `Payment initiation failed: ${responseText}`, status: response.status };\n    }\n\n  } catch (error) {\n    console.error(\"Error calling Wema Alat API:\", error);\n    return { success: false, error: \"Could not connect to the payment gateway.\" };\n  }\n}\n\nexport async function validateWemaAlatPayment(validationData: z.infer<typeof wemaPaymentValidationSchema>) {\n    const validatedFields = wemaPaymentValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid validation data provided.' };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { channelId, transactionReference, platformTransactionReference, otp } = validatedFields.data;\n\n    const body = {\n        channelId,\n        transactionReference,\n        platformTransactionReference,\n        otp,\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-validation', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Wema Alat transfer-fund-validation response status:\", response.status);\n        console.log(\"Wema Alat transfer-fund-validation response body:\", responseText);\n        \n        if(response.ok) {\n            return { success: true, message: \"Payment validated successfully!\" };\n        } else {\n            return { success: false, error: `OTP validation failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Wema Alat validation API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway for validation.\" };\n    }\n}\n\n\nexport async function checkWemaAlatTransactionStatus(statusData: z.infer<typeof wemaPaymentStatusSchema>) {\n    const validatedFields = wemaPaymentStatusSchema.safeParse(statusData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid transaction data' };\n    }\n\n    const { channelId, transactionReference } = validatedFields.data;\n\n    const wemaAlatUrl = `https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/CheckTransactionStatus/${channelId}/${transactionReference}`;\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set in environment variables.\");\n        return { success: false, error: \"Payment gateway is not configured.\" };\n    }\n    \n    try {\n        const response = await fetch(wemaAlatUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const resultText = await response.text();\n        const resultStatus = response.status;\n        console.log('Wema Alat Status:', resultStatus);\n        console.log('Wema Alat Response:', resultText);\n\n        if (response.ok) {\n            return { success: true, status: resultStatus, data: resultText };\n        } else {\n            return { success: false, error: `Failed to check transaction status: ${resultText}`, status: resultStatus };\n        }\n\n    } catch (error) {\n        console.error(\"Error calling Wema Alat API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway.\" };\n    }\n}\n\n\nexport async function createRemitaPayment(paymentData: z.infer<typeof remitaPaymentRequestSchema>) {\n    const validatedFields = remitaPaymentRequestSchema.safeParse(paymentData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita payment data.\" };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Remita subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { amount, charge, transactionReference, customerEmail, customerName, customerPhoneNumber, description } = validatedFields.data;\n\n    const body = {\n        channelId: \"string\", // Placeholder\n        cif: \"string\", // Placeholder\n        customerAccount: \"string\", // Placeholder\n        amount: amount,\n        charge: charge,\n        transactionReference: transactionReference,\n        customerEmail: customerEmail,\n        customerPhoneNumber: customerPhoneNumber,\n        customerName: customerName,\n        rrr: \"string\", // Placeholder\n        payerEmail: customerEmail,\n        payerName: customerName,\n        payerNumber: customerPhoneNumber,\n        description: description,\n        billAuthOptions: {\n            pin: \"string\",\n            otp: \"string\",\n            biometricPolicy: \"string\",\n            biometricToken: \"string\",\n            platformTransactionReference: \"string\",\n            authenticationType: 0\n        }\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PayRemitaBill', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PayRemitaBill response status:\", response.status);\n        console.log(\"Remita PayRemitaBill response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita payment processed successfully.\", data: JSON.parse(responseText) };\n        } else {\n             if (response.status === 500) {\n                 return { success: false, error: `Remita payment failed due to an internal server error on the gateway. Please try again later or contact support.` };\n             }\n            return { success: false, error: `Remita payment failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PayRemitaBill API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway.\" };\n    }\n}\n\nexport async function printRemitaReceipt(receiptData: z.infer<typeof remitaReceiptSchema>) {\n    const validatedFields = remitaReceiptSchema.safeParse(receiptData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita receipt data.\" };\n    }\n\n    const { rrr } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PrintRemitaReceipt/${rrr}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PrintRemitaReceipt response status:\", response.status);\n        console.log(\"Remita PrintRemitaReceipt response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, receiptData: responseText };\n        } else {\n            return { success: false, error: `Failed to fetch Remita receipt: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PrintRemitaReceipt API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to print receipt.\" };\n    }\n}\n\n\nexport async function validateRemitaRrr(validationData: z.infer<typeof remitaRrrValidationSchema>) {\n    const validatedFields = remitaRrrValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita RRR validation data.\" };\n    }\n\n    const { rrr, channelId } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/ValidateRrr/${rrr}/${channelId}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita ValidateRrr response status:\", response.status);\n        console.log(\"Remita ValidateRrr response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita RRR validated successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Failed to validate Remita RRR: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita ValidateRrr API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to validate RRR.\" };\n    }\n}\n\n    \n\n    \n"],"names":[],"mappings":";;;;;;IAsEsB,sBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/vote/page.tsx"],"sourcesContent":["\n\"use client\";\n\nimport React, { useState, useMemo, useTransition } from 'react';\nimport { useRouter } from 'next/navigation';\nimport Image from 'next/image';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Label } from '@/components/ui/label';\nimport { ArrowRight, ChevronDown, Award as AwardIcon, Loader2, Star } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport ContestantCard, { Contestant } from '@/components/features/vote/contestant-card';\nimport { cn } from '@/lib/utils';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { sendNominationEmail } from '@/app/actions';\n\nconst generalCategories = [\n    { title: \"Fitness Trainer/Coach of the Year\" },\n    { title: \"Fitness Club Coach of the Year\" },\n    { title: \"Foundation Fitness Award\" },\n    { title: \"Mental Health & Wellness Advocate\" },\n    { title: \"Life Champion Award - Overcomers series\" },\n    { title: \"Foundation Fitness Hero Award\" },\n    { title: \"Educators Recognition series\" },\n    { title: \"Fitness Event Of The Year (Coaches)\" },\n    { title: \"Fitness Event Of The Year (Clubs)\" },\n];\n\nconst recognitionCategories = [\n      { title: \"Inspirational Weight-Loss Journey\" },\n      { title: \"Art and Wellness Advocate\" },\n      { title: \"Community Fitness Hero of the Year\" },\n      { title: \"Care-Givers Advocate\" }, // Nurses\n      { title: \"Health Care Treatment Advocate\" }, // Doctors\n      { title: \"Pharmaceutical Service Champion\" }, // Pharmacy / Pharmacist\n      { title: \"Physiotherapist of the Year\" },\n];\n\nconst organizationsCategories = [\n    { title: \"Corporate Wellness Champion\" },\n    { title: \"Corporate Social Responsibility Champion\" },\n    { title: \"Gym of the Year\" },\n];\n\nconst allAwardCategories = [\n    ...generalCategories,\n    ...recognitionCategories,\n    ...organizationsCategories\n].map(c => c.title);\n\nconst contestants: Contestant[] = [\n    { id: '1', name: 'Coach NTB', category: 'Fitness Trainer/Coach of the Year', image: '/ntb2.JPG' },\n    { id: '2', name: 'Coach Tawani', category: 'Fitness Trainer/Coach of the Year', image: '/Tawani.jpg' },\n    { id: '3', name: 'Body Quest', category: 'Fitness Trainer/Coach of the Year', image: '/bodyq.jpg' },\n    { id: '22', name: 'Coach George', category: 'Fitness Trainer/Coach of the Year', image: '/george.jpg' },\n    { id: '23', name: 'Coach Collins', category: 'Fitness Trainer/Coach of the Year', image: '/collins.jpg' },\n    { id: '4', name: 'Pharm. Mrs. Onwudiwe Blessing', category: 'Inspirational Weight-Loss Journey', image: '/bles.JPG', objectPosition: 'center 25%' },\n    { id: '5', name: 'Mrs Virtue Michael Okoi', category: 'Inspirational Weight-Loss Journey', image: '/okoi.JPG' },\n    { id: '6', name: 'David L', category: 'Community Fitness Hero of the Year', image: 'https://placehold.co/400x400.png?text=David+L' },\n    { id: '24', name: 'Jane F.', category: 'Community Fitness Hero of the Year', image: 'https://placehold.co/400x400.png?text=Jane+F' },\n    { id: '25', name: 'Mike R.', category: 'Community Fitness Hero of the Year', image: 'https://placehold.co/400x400.png?text=Mike+R' },\n    // Professionals\n    { id: '7', name: 'Nurse Joy', category: 'Care-Givers Advocate', image: 'https://placehold.co/400x400.png?text=Nurse+J' },\n    { id: '26', name: 'Nurse Michael', category: 'Care-Givers Advocate', image: 'https://placehold.co/400x400.png?text=Nurse+M' },\n    { id: '27', name: 'Nurse Ada', category: 'Care-Givers Advocate', image: 'https://placehold.co/400x400.png?text=Nurse+A' },\n    { id: '8', name: 'Dr. Mike', category: 'Health Care Treatment Advocate', image: 'https://placehold.co/400x400.png?text=Dr+M' },\n    { id: '28', name: 'Dr. Chen', category: 'Health Care Treatment Advocate', image: 'https://placehold.co/400x400.png?text=Dr+C' },\n    { id: '29', name: 'Dr. Okonjo', category: 'Health Care Treatment Advocate', image: 'https://placehold.co/400x400.png?text=Dr+O' },\n    { id: '9', name: 'PharmaPlus', category: 'Pharmaceutical Service Champion', image: 'https://placehold.co/400x400.png?text=Rx+' },\n    { id: '30', name: 'HealthFirst Pharmacy', category: 'Pharmaceutical Service Champion', image: 'https://placehold.co/400x400.png?text=HF+Rx' },\n    { id: '31', name: 'Care Pharmacy', category: 'Pharmaceutical Service Champion', image: 'https://placehold.co/400x400.png?text=Care+Rx' },\n    { id: '10', name: 'Sarah Lee, RPT', category: 'Physiotherapist of the Year', image: 'https://placehold.co/400x400.png?text=SL' },\n    { id: '32', name: 'Femi Ade, RPT', category: 'Physiotherapist of the Year', image: 'https://placehold.co/400x400.png?text=FA' },\n    { id: '33', name: 'Chioma Obi, RPT', category: 'Physiotherapist of the Year', image: 'https://placehold.co/400x400.png?text=CO' },\n    // Organizations\n    { id: '11', name: 'Wellness Inc.', category: 'Corporate Wellness Champion', image: 'https://placehold.co/400x400.png?text=W+Inc' },\n    { id: '12', name: 'GoodWorks LLC', category: 'Corporate Social Responsibility Champion', image: 'https://placehold.co/400x400.png?text=GW+LLC' },\n    // New contestants\n    { id: '48', name: 'Coach Ifiok', category: 'Fitness Club Coach of the Year', image: '/ifiok.jpg' },\n    { id: '49', name: 'Coach Ofonime', category: 'Fitness Club Coach of the Year', image: '/ofon.JPG' },\n    { id: '50', name: 'Coach Bigname', category: 'Fitness Club Coach of the Year', image: '/Bigname.jpg' },\n    { id: '15', name: 'Victor\\'s Fitness', category: 'Gym of the Year', image: 'https://placehold.co/400x400.png?text=VF' },\n    { id: '16', name: 'Romaan Fitness', category: 'Gym of the Year', image: 'https://placehold.co/400x400.png?text=RF' },\n    { id: '17', name: 'Hogis Fitness', category: 'Gym of the Year', image: '/hogis.png' },\n    { id: '18', name: '1480 AZ GYM (NAVY GYM)', category: 'Gym of the Year', image: '/az.jpg', objectPosition: 'center 20%' },\n    { id: '19', name: 'Oma', category: 'Art and Wellness Advocate', image: 'https://placehold.co/400x400.png?text=OMA' },\n    { id: '20', name: 'Lifeclinicng', category: 'Art and Wellness Advocate', image: '/dr ken.jpg' },\n    { id: '21', name: 'Hannah Bassey-Duke', category: 'Art and Wellness Advocate', image: '/han.jpg' },\n    { id: '42', name: '300 Tawani Fitness Day-Out', category: 'Fitness Event Of The Year (Coaches)', image: '/tawani.JPG' },\n    { id: '43', name: 'The Exclusive Workout Exibition', category: 'Fitness Event Of The Year (Coaches)', image: '/dbb.png' },\n    { id: '44', name: 'Event Coache C', category: 'Fitness Event Of The Year (Coaches)', image: 'https://placehold.co/400x400.png?text=EC-C' },\n    { id: '45', name: 'Calabar Walkhathon', category: 'Fitness Event Of The Year (Clubs)', image: '/walk2.png', objectFit: 'contain' },\n    { id: '46', name: 'Pro Fitness', category: 'Fitness Event Of The Year (Clubs)', image: '/profitness.jpg', objectFit: 'contain' },\n    { id: '47', name: 'Micki Fitness', category: 'Fitness Event Of The Year (Clubs)', image: '/miki.jpeg' },\n    \n];\n\nconst nominationFormSchema = z.object({\n  category: z.string().min(1, \"Please select an award category.\"),\n  nomineeName: z.string().min(2, \"Nominee name must be at least 2 characters.\"),\n  nomineePhone: z.string().min(10, \"Please enter a valid phone number.\"),\n  nominationReason: z.string().min(10, \"Please provide a reason for the nomination.\"),\n  nominatorName: z.string().min(2, \"Please enter your name.\"),\n  nominatorPhone: z.string().min(10, \"Please enter your phone number.\"),\n});\n\nconst voteOptions = [\n    { base: 10, free: 2, label: \"10 Votes + 2 Free\" },\n    { base: 50, free: 3, label: \"50 Votes + 3 Free\" },\n    { base: 100, free: 5, label: \"100 Votes + 5 Free\" },\n    { base: 500, free: 10, label: \"500 Votes + 10 Free\" },\n    { base: 1000, free: 20, label: \"1000 Votes + 20 Bonus\" },\n];\n\n\nexport default function VotePage() {\n    const { toast } = useToast();\n    const router = useRouter();\n    const [isPending, startTransition] = useTransition();\n    const [selectedContestant, setSelectedContestant] = useState<Contestant | null>(null);\n    const [selectedCategory, setSelectedCategory] = useState<string>(\"All Categories\");\n    const [numberOfVotes, setNumberOfVotes] = useState<string>(String(voteOptions[0].base));\n\n    const form = useForm<z.infer<typeof nominationFormSchema>>({\n        resolver: zodResolver(nominationFormSchema),\n        defaultValues: {\n            category: \"\",\n            nomineeName: \"\",\n            nomineePhone: \"\",\n            nominationReason: \"\",\n            nominatorName: \"\",\n            nominatorPhone: \"\",\n        },\n    });\n\n    const handleNominationSubmit = (values: z.infer<typeof nominationFormSchema>) => {\n        startTransition(async () => {\n            const result = await sendNominationEmail(values);\n            if (result.success) {\n                toast({\n                    title: \"Nomination Submitted!\",\n                    description: \"Thank you for nominating. We will review your submission.\",\n                });\n                form.reset();\n            } else {\n                toast({\n                    title: \"Submission Failed\",\n                    description: result.error,\n                    variant: \"destructive\"\n                });\n            }\n        });\n    };\n\n    const handleProceedToVote = () => {\n        if (!selectedContestant) {\n            toast({\n                title: \"No Contestant Selected\",\n                description: \"Please select a contestant before proceeding.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n        \n        const selectedVoteOption = voteOptions.find(o => o.base === parseInt(numberOfVotes));\n        if (!selectedVoteOption) {\n            toast({\n                title: \"Invalid Vote Amount\",\n                description: \"Please select a valid number of votes.\",\n                variant: \"destructive\"\n            });\n            return;\n        }\n\n        const totalVotes = selectedVoteOption.base + selectedVoteOption.free;\n        const { id, name, category } = selectedContestant;\n        const query = new URLSearchParams({ id, name, category, votes: String(totalVotes) }).toString();\n        router.push(`/checkout?${query}`);\n    };\n\n    const recognitionCategoryTitles = useMemo(() => new Set(recognitionCategories.map(c => c.title)), []);\n    \n    const votableContestants = useMemo(() => {\n        return contestants.filter(c => !recognitionCategoryTitles.has(c.category));\n    }, [recognitionCategoryTitles]);\n\n    const recognitionContestants = useMemo(() => {\n        return contestants.filter(c => recognitionCategoryTitles.has(c.category));\n    }, [recognitionCategoryTitles]);\n\n\n    const filteredContestants = useMemo(() => {\n        if (selectedCategory === \"All Categories\") {\n            return votableContestants;\n        }\n        return votableContestants.filter(c => c.category === selectedCategory);\n    }, [selectedCategory, votableContestants]);\n\n    const isCategoryActive = (mainCategory: string, subCategories: {title: string}[]) => {\n        if (selectedCategory === mainCategory) return true;\n        return subCategories.some(sub => sub.title === selectedCategory);\n    };\n    \n    const categoriesToDisplay = useMemo(() => {\n        if (selectedCategory === \"All Categories\") {\n            const categoriesWithContestants = new Set(votableContestants.map(c => c.category));\n            return [...generalCategories, ...organizationsCategories]\n                .map(c => c.title)\n                .filter(cat => categoriesWithContestants.has(cat));\n        }\n        return [selectedCategory];\n    }, [selectedCategory, votableContestants]);\n\n    const renderDropdown = (mainTitle: string, subItems: {title: string}[]) => {\n        const isActive = isCategoryActive(mainTitle, subItems);\n        return (\n            <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                    <Button\n                        variant=\"outline\"\n                        className={cn(\n                            \"border-amber-400/30 text-amber-300 hover:bg-amber-400/10 hover:text-amber-200\",\n                            isActive && \"bg-amber-400/20 ring-2 ring-amber-400 text-amber-200\"\n                        )}\n                    >\n                        {mainTitle} <ChevronDown className=\"ml-2 h-4 w-4\" />\n                    </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent className=\"bg-zinc-900 border-amber-400/30 text-amber-300\">\n                    {subItems.map(item => (\n                         <DropdownMenuItem key={item.title} onSelect={() => setSelectedCategory(item.title)} className=\"cursor-pointer hover:!bg-amber-400/20 focus:!bg-amber-400/20\">\n                            {item.title}\n                        </DropdownMenuItem>\n                    ))}\n                </DropdownMenuContent>\n            </DropdownMenu>\n        );\n    };\n\n    return (\n        <div className=\"bg-black text-white min-h-screen\" style={{\n            backgroundImage: `url('/black-bg.jpeg')`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundAttachment: 'fixed',\n        }}>\n            <div className=\"bg-black/80 backdrop-blur-sm min-h-screen\">\n                <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24\">\n                    <header className=\"text-center mb-12 md:mb-16\">\n                        <Image\n                            src=\"/SR.jpg\"\n                            alt=\"SR Fitness Awards Logo\"\n                            width={96}\n                            height={96}\n                            className=\"h-24 w-24 mx-auto mb-4 rounded-full\"\n                            data-ai-hint=\"awards logo\"\n                            priority\n                        />\n                        <p className=\"font-headline text-2xl text-amber-400 tracking-wider\">\n                            IDENTIFY, RECOGNIZE & CELEBRATE FITNESS INDUSTRY EXCELLENCE\n                        </p>\n                    </header>\n\n                    <div className=\"mb-12 md:mb-16 flex justify-center\">\n                        <Image\n                            src=\"/VOTEG.png\"\n                            alt=\"SR Fitness Awards Voting Guide with pricing\"\n                            width={800}\n                            height={800}\n                            className=\"rounded-lg shadow-2xl shadow-amber-500/20 max-w-full sm:max-w-lg md:max-w-xl\"\n                            data-ai-hint=\"voting guide\"\n                            priority\n                        />\n                    </div>\n                    \n                    <main className=\"space-y-16\">\n                        {/* --- Voting Section --- */}\n                        <section id=\"vote\">\n                            <div className=\"grid lg:grid-cols-2 gap-8 md:gap-12 items-start\">\n                                <Card className=\"bg-zinc-900/50 border-amber-400/30 text-white shadow-2xl shadow-amber-500/10\">\n                                    <CardHeader>\n                                        <CardTitle className=\"font-headline text-4xl text-amber-400\">Vote for a Contestant</CardTitle>\n                                        <CardDescription className=\"text-zinc-400\">1. Select a category, then choose a contestant below.</CardDescription>\n                                    </CardHeader>\n                                    <CardContent>\n                                        <div className=\"mb-6\">\n                                            <p className=\"font-semibold text-zinc-300 mb-3\">Filter by Category:</p>\n                                            <div className=\"flex flex-wrap items-center gap-2\">\n                                                <Button\n                                                    variant=\"outline\"\n                                                    onClick={() => setSelectedCategory(\"All Categories\")}\n                                                    className={cn(\n                                                        \"border-amber-400/30 text-amber-300 hover:bg-amber-400/10 hover:text-amber-200\",\n                                                        selectedCategory === \"All Categories\" && \"bg-amber-400/20 ring-2 ring-amber-400 text-amber-200\"\n                                                    )}\n                                                >\n                                                    All Categories\n                                                </Button>\n                                                <div className=\"h-6 w-px bg-amber-400/30\" />\n                                                {renderDropdown(\"General\", generalCategories)}\n                                                <div className=\"h-6 w-px bg-amber-400/30\" />\n                                                {renderDropdown(\"Organizations\", organizationsCategories)}\n                                            </div>\n                                        </div>\n                                         <div className=\"space-y-8\">\n                                            {categoriesToDisplay.map((category) => {\n                                                const contestantsForCategory = filteredContestants.filter(c => c.category === category);\n                                                if (contestantsForCategory.length === 0) return null;\n\n                                                return (\n                                                    <div key={category}>\n                                                        <h3 className=\"font-headline text-2xl text-amber-300 mb-4 pb-2 border-b border-amber-400/20\">{category}</h3>\n                                                        <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                                                            {contestantsForCategory.map(c => (\n                                                                <ContestantCard \n                                                                    key={c.id} \n                                                                    contestant={c}\n                                                                    isVotable={true}\n                                                                    isSelected={selectedContestant?.id === c.id}\n                                                                    onSelect={() => {\n                                                                        if (selectedContestant?.id === c.id) {\n                                                                            setSelectedContestant(null);\n                                                                        } else {\n                                                                            setSelectedContestant(c);\n                                                                        }\n                                                                    }}\n                                                                />\n                                                            ))}\n                                                        </div>\n                                                    </div>\n                                                )\n                                            })}\n                                        </div>\n                                    </CardContent>\n                                </Card>\n\n                                <div className=\"space-y-8 sticky top-24\">\n                                    <Card className=\"bg-zinc-900/50 border-amber-400/30 text-white shadow-2xl shadow-amber-500/10\">\n                                        <CardHeader>\n                                            <CardTitle className=\"font-headline text-4xl text-amber-400\">2. Complete Your Vote</CardTitle>\n                                            <CardDescription className=\"text-zinc-400\">\n                                                After selecting a contestant, confirm the number of votes and click below.\n                                            </CardDescription>\n                                        </CardHeader>\n                                        <CardContent>\n                                            {selectedContestant ? (\n                                                <div className=\"bg-zinc-800/70 p-4 rounded-lg space-y-4\">\n                                                    <div className=\"text-center\">\n                                                        <p className=\"text-zinc-300 mb-1\">You have selected:</p>\n                                                        <p className=\"font-bold text-amber-300 text-xl\">{selectedContestant.name}</p>\n                                                        <p className=\"text-xs text-zinc-400\">{selectedContestant.category}</p>\n                                                    </div>\n                                                     <div>\n                                                        <Label className=\"text-zinc-300 font-semibold mb-2 block text-center\">Number of Votes:</Label>\n                                                        <Select onValueChange={setNumberOfVotes} defaultValue={numberOfVotes}>\n                                                            <SelectTrigger className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400 w-full\">\n                                                                <SelectValue placeholder=\"Select number of votes\" />\n                                                            </SelectTrigger>\n                                                            <SelectContent className=\"bg-zinc-900 border-amber-400/30 text-amber-300\">\n                                                                {voteOptions.map(v => (\n                                                                    <SelectItem key={v.base} value={String(v.base)} className=\"cursor-pointer hover:!bg-amber-400/20 focus:!bg-amber-400/20\">{v.label}</SelectItem>\n                                                                ))}\n                                                            </SelectContent>\n                                                        </Select>\n                                                    </div>\n                                                </div>\n                                            ) : (\n                                                <div className=\"bg-zinc-800/50 p-4 rounded-lg text-center h-24 flex items-center justify-center\">\n                                                    <p className=\"text-zinc-400\">Please select a contestant to vote for.</p>\n                                                </div>\n                                            )}\n                                            <Button\n                                                size=\"lg\"\n                                                className=\"w-full mt-6 bg-amber-500 text-black font-bold text-lg hover:bg-amber-400 disabled:bg-zinc-600 disabled:text-zinc-400 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105\"\n                                                onClick={handleProceedToVote}\n                                                disabled={!selectedContestant}\n                                            >\n                                                Proceed to Vote <ArrowRight className=\"ml-2 h-5 w-5\" />\n                                            </Button>\n                                            <p className=\"text-xs text-zinc-500 mt-4 text-center\">\n                                                You will be taken to a final confirmation page with payment details.\n                                            </p>\n                                        </CardContent>\n                                    </Card>\n                                </div>\n                            </div>\n                        </section>\n\n                         {/* --- Professional Recognition Section --- */}\n                        <section id=\"recognition\">\n                            <Card className=\"bg-zinc-900/50 border-amber-400/30 text-white shadow-2xl shadow-amber-500/10\">\n                                <CardHeader>\n                                    <div className=\"flex items-center gap-4\">\n                                        <Star className=\"h-10 w-10 text-amber-400\" />\n                                        <div>\n                                            <CardTitle className=\"font-headline text-4xl text-amber-400\">Recognition Awards</CardTitle>\n                                            <CardDescription className=\"text-zinc-400\">Honoring excellence in specialized fields. These categories are for recognition only and are not part of the public vote.</CardDescription>\n                                        </div>\n                                    </div>\n                                </CardHeader>\n                                <CardContent>\n                                    <div className=\"space-y-8\">\n                                        {recognitionCategories.map((category) => {\n                                            const contestantsForCategory = recognitionContestants.filter(c => c.category === category.title);\n                                            if (contestantsForCategory.length === 0) return null;\n\n                                            return (\n                                                <div key={category.title}>\n                                                    <h3 className=\"font-headline text-2xl text-amber-300 mb-4 pb-2 border-b border-amber-400/20\">{category.title}</h3>\n                                                    <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4\">\n                                                        {contestantsForCategory.map(c => (\n                                                            <ContestantCard \n                                                                key={c.id} \n                                                                contestant={c}\n                                                                isVotable={false}\n                                                            />\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                            )\n                                        })}\n                                    </div>\n                                </CardContent>\n                            </Card>\n                        </section>\n                        \n                        {/* --- Nomination Section --- */}\n                        <section id=\"nominate\">\n                             <Card className=\"bg-zinc-900/50 border-amber-400/30 text-white shadow-2xl shadow-amber-500/10\">\n                                <CardHeader>\n                                    <div className=\"flex items-center gap-4\">\n                                        <AwardIcon className=\"h-10 w-10 text-amber-400\" />\n                                        <div>\n                                            <CardTitle className=\"font-headline text-4xl text-amber-400\">Online Nomination Form</CardTitle>\n                                            <CardDescription className=\"text-zinc-400\">Think someone deserves an award? Nominate them here!</CardDescription>\n                                        </div>\n                                    </div>\n                                </CardHeader>\n                                <CardContent>\n                                    <Form {...form}>\n                                        <form onSubmit={form.handleSubmit(handleNominationSubmit)} className=\"space-y-6\">\n                                            <div className=\"grid md:grid-cols-2 gap-6\">\n                                                <FormField\n                                                    control={form.control}\n                                                    name=\"category\"\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <FormLabel className=\"text-zinc-300\">Award Category</FormLabel>\n                                                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                                                <FormControl>\n                                                                    <SelectTrigger className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400\">\n                                                                        <SelectValue placeholder=\"Select an award to nominate for\" />\n                                                                    </SelectTrigger>\n                                                                </FormControl>\n                                                                <SelectContent className=\"bg-zinc-900 border-amber-400/30 text-amber-300\">\n                                                                    {allAwardCategories.map(cat => (\n                                                                        <SelectItem key={cat} value={cat} className=\"cursor-pointer hover:!bg-amber-400/20 focus:!bg-amber-400/20\">{cat}</SelectItem>\n                                                                    ))}\n                                                                </SelectContent>\n                                                            </Select>\n                                                            <FormMessage />\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                                 <FormField\n                                                    control={form.control}\n                                                    name=\"nomineeName\"\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <FormLabel className=\"text-zinc-300\">Nominee's Full Name</FormLabel>\n                                                            <FormControl>\n                                                                <Input placeholder=\"e.g., John Doe\" {...field} className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400\"/>\n                                                            </FormControl>\n                                                            <FormMessage />\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                                <FormField\n                                                    control={form.control}\n                                                    name=\"nomineePhone\"\n                                                    render={({ field }) => (\n                                                        <FormItem>\n                                                            <FormLabel className=\"text-zinc-300\">Nominee's Phone Number</FormLabel>\n                                                            <FormControl>\n                                                                <Input placeholder=\"e.g., 08012345678\" {...field} className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400\"/>\n                                                            </FormControl>\n                                                            <FormMessage />\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                                <FormField\n                                                    control={form.control}\n                                                    name=\"nominationReason\"\n                                                    render={({ field }) => (\n                                                        <FormItem className=\"md:col-span-2\">\n                                                            <FormLabel className=\"text-zinc-300\">Reason for Nomination</FormLabel>\n                                                            <FormControl>\n                                                                <Textarea placeholder=\"Briefly explain why they deserve this award...\" {...field} className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400\" rows={4}/>\n                                                            </FormControl>\n                                                            <FormMessage />\n                                                        </FormItem>\n                                                    )}\n                                                />\n                                                 <div className=\"md:col-span-2 border-t border-zinc-700 pt-6 space-y-6\">\n                                                     <FormField\n                                                        control={form.control}\n                                                        name=\"nominatorName\"\n                                                        render={({ field }) => (\n                                                            <FormItem>\n                                                                <FormLabel className=\"text-zinc-300\">Your Name (Nominator)</FormLabel>\n                                                                <FormControl>\n                                                                    <Input placeholder=\"Your full name\" {...field} className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400\"/>\n                                                                </FormControl>\n                                                                <FormMessage />\n                                                            </FormItem>\n                                                        )}\n                                                    />\n                                                     <FormField\n                                                        control={form.control}\n                                                        name=\"nominatorPhone\"\n                                                        render={({ field }) => (\n                                                            <FormItem>\n                                                                <FormLabel className=\"text-zinc-300\">Your Phone Number</FormLabel>\n                                                                <FormControl>\n                                                                    <Input placeholder=\"Your contact phone number\" {...field} className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400\"/>\n                                                                </FormControl>\n                                                                <FormMessage />\n                                                            </FormItem>\n                                                        )}\n                                                    />\n                                                 </div>\n                                            </div>\n                                            <Button type=\"submit\" size=\"lg\" className=\"w-full md:w-auto bg-amber-500 text-black font-bold hover:bg-amber-400 disabled:opacity-75\" disabled={isPending}>\n                                                {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                                                {isPending ? 'Submitting...' : 'Submit Nomination'}\n                                            </Button>\n                                        </form>\n                                    </Form>\n                                </CardContent>\n                            </Card>\n                        </section>\n                    </main>\n                </div>\n            </div>\n        </div>\n    );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}