{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/analyze-exercise-form-flow.ts"],"sourcesContent":["\n'use server';\n/**\n * @fileOverview Analyzes user's exercise form from an image and provides feedback.\n *\n * - analyzeExerciseForm - A function that calls the exercise form analysis flow.\n * - AnalyzeExerciseFormInput - The input type for the form analysis.\n * - AnalyzeExerciseFormOutput - The return type (feedback items and assessment).\n */\n\nimport { ai } from '@/ai/genkit';\nimport { z } from 'genkit';\n\n// Define input schema for the exercise form analysis\nconst AnalyzeExerciseFormInputSchema = z.object({\n  imageDataUri: z\n    .string()\n    .describe(\n      \"A still image of the user performing an exercise, as a data URI. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n  exerciseName: z.string().optional().describe('The name of the exercise being performed (e.g., Squat, Push-up, Lunge).'),\n});\nexport type AnalyzeExerciseFormInput = z.infer<typeof AnalyzeExerciseFormInputSchema>;\n\n// Define output schema for the form analysis feedback\nconst AnalyzeExerciseFormOutputSchema = z.object({\n  feedbackItems: z.array(z.string()).describe(\"Specific, actionable feedback points to correct the user's form. Each item should be a concise suggestion.\"),\n  overallAssessment: z.string().optional().describe(\"A brief overall assessment of the user's form (e.g., Good, Needs Improvement, Pay attention to...).\"),\n  isFormCorrect: z.boolean().optional().describe(\"A boolean indicating if the overall form is considered correct or if there are significant issues.\"),\n});\nexport type AnalyzeExerciseFormOutput = z.infer<typeof AnalyzeExerciseFormOutputSchema>;\n\n// This is the exported function React components will call.\nexport async function analyzeExerciseForm(input: AnalyzeExerciseFormInput): Promise<AnalyzeExerciseFormOutput> {\n  console.log('analyzeExerciseForm called with input for exercise:', input.exerciseName);\n  return analyzeExerciseFormFlow(input);\n}\n\n// Define the Genkit prompt\nconst exerciseFormPrompt = ai.definePrompt({\n  name: 'exerciseFormPrompt',\n  input: { schema: AnalyzeExerciseFormInputSchema },\n  output: { schema: AnalyzeExerciseFormOutputSchema },\n  prompt: `You are an expert fitness coach specializing in exercise form analysis.\nAnalyze the provided image of a user performing an exercise.\n{{#if exerciseName}}\nThe user states they are performing: {{exerciseName}}. Focus your analysis on the correctness of this specific exercise.\n{{else}}\nThe user has not specified the exercise. Attempt to identify the exercise if possible, or provide general postural feedback.\n{{/if}}\n\nBased on the image, provide:\n1.  'feedbackItems': An array of specific, actionable suggestions to improve their form. Be concise and clear. If the form is good for a particular aspect, you can state that too (e.g., \"Good spinal alignment.\").\n2.  'overallAssessment': A brief summary statement about the overall form.\n3.  'isFormCorrect': A boolean indicating if the form is generally correct (true) or has notable issues needing correction (false).\n\nFocus on common mistakes and critical safety aspects of the exercise form. If the image quality is too poor or the person is not visible enough to make a proper assessment, indicate this in the overallAssessment and provide an empty feedbackItems array.\n\nUser's Exercise Image:\n{{media url=imageDataUri}}\n`,\n});\n\n// Define the Genkit flow\nconst analyzeExerciseFormFlow = ai.defineFlow(\n  {\n    name: 'analyzeExerciseFormFlow',\n    inputSchema: AnalyzeExerciseFormInputSchema,\n    outputSchema: AnalyzeExerciseFormOutputSchema,\n  },\n  async (input) => {\n    const { output } = await exerciseFormPrompt(input);\n    if (!output) {\n      // Consider returning a default error structure if the AI fails to respond\n      return {\n        feedbackItems: [\"AI analysis failed to generate feedback. Please try again.\"],\n        overallAssessment: \"Error: No output from AI.\",\n        isFormCorrect: false,\n      };\n    }\n    // If AI might return partial output, ensure all fields are present or defaulted\n    return {\n      feedbackItems: output.feedbackItems || [],\n      overallAssessment: output.overallAssessment || \"Assessment not provided.\",\n      isFormCorrect: typeof output.isFormCorrect === 'boolean' ? output.isFormCorrect : false,\n    };\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,qDAAqD;AACrD,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC/C;AAGA,sDAAsD;AACtD,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,eAAe,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IAC5C,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IAClD,eAAe,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjD;AAIO,eAAe,oBAAoB,KAA+B;IACvE,QAAQ,GAAG,CAAC,uDAAuD,MAAM,YAAY;IACrF,OAAO,wBAAwB;AACjC;AAEA,2BAA2B;AAC3B,MAAM,qBAAqB,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IACzC,MAAM;IACN,OAAO;QAAE,QAAQ;IAA+B;IAChD,QAAQ;QAAE,QAAQ;IAAgC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;;;;;AAiBX,CAAC;AACD;AAEA,yBAAyB;AACzB,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO;IACL,MAAM,EAAE,MAAM,EAAE,GAAG,MAAM,mBAAmB;IAC5C,IAAI,CAAC,QAAQ;QACX,0EAA0E;QAC1E,OAAO;YACL,eAAe;gBAAC;aAA6D;YAC7E,mBAAmB;YACnB,eAAe;QACjB;IACF;IACA,gFAAgF;IAChF,OAAO;QACL,eAAe,OAAO,aAAa,IAAI,EAAE;QACzC,mBAAmB,OAAO,iBAAiB,IAAI;QAC/C,eAAe,OAAO,OAAO,aAAa,KAAK,YAAY,OAAO,aAAa,GAAG;IACpF;AACF;;;IArDoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/smart-mirror/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {analyzeExerciseForm as '408f81d6cdd4e89f4e0b02ab0b3e7cbb8cead04c08'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 385, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/features/smart-mirror/smart-mirror-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/features/smart-mirror/smart-mirror-client.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/features/smart-mirror/smart-mirror-client.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgU,GAC7V,8FACA","debugId":null}},
    {"offset": {"line": 399, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/features/smart-mirror/smart-mirror-client.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/components/features/smart-mirror/smart-mirror-client.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/features/smart-mirror/smart-mirror-client.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA4S,GACzU,0EACA","debugId":null}},
    {"offset": {"line": 413, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 423, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/smart-mirror/page.tsx"],"sourcesContent":["\nimport type { Metadata } from 'next';\nimport SmartMirrorClient from '@/components/features/smart-mirror/smart-mirror-client';\nimport { ScanLine } from 'lucide-react';\n\nexport const metadata: Metadata = {\n  title: 'Smart Mirror Form Analysis - SR Fitness',\n  description: 'Get real-time feedback on your exercise form using our AI-powered Smart Mirror.',\n};\n\nexport default function SmartMirrorPage() {\n  return (\n    <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24\">\n      <div className=\"text-center mb-12 md:mb-16\">\n        <ScanLine className=\"h-16 w-16 text-primary mx-auto mb-4\" />\n        <h1 className=\"font-headline text-4xl sm:text-5xl md:text-6xl font-bold text-primary mb-4\">\n          Smart Mirror Form Analysis\n        </h1>\n        <p className=\"text-lg sm:text-xl text-muted-foreground max-w-3xl mx-auto\">\n          Perfect your technique with AI-driven real-time feedback. Allow camera access to begin.\n        </p>\n      </div>\n      <SmartMirrorClient />\n    </div>\n  );\n}\n"],"names":[],"mappings":";;;;;AAEA;AACA;;;;AAEO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS;IACtB,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC;gBAAI,WAAU;;kCACb,8OAAC,8MAAA,CAAA,WAAQ;wBAAC,WAAU;;;;;;kCACpB,8OAAC;wBAAG,WAAU;kCAA6E;;;;;;kCAG3F,8OAAC;wBAAE,WAAU;kCAA6D;;;;;;;;;;;;0BAI5E,8OAAC,8KAAA,CAAA,UAAiB;;;;;;;;;;;AAGxB","debugId":null}}]
}