{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { addVote } from '@/services/firestore';\n\n// Explicitly read environment variables at the top level\nconst WEMA_ALAT_SUBSCRIPTION_KEY = process.env.WEMA_ALAT_SUBSCRIPTION_KEY;\nconst WEMA_ALAT_SOURCE_ACCOUNT = process.env.WEMA_ALAT_SOURCE_ACCOUNT;\nconst WEMA_ALAT_CHANNEL_ID = process.env.WEMA_ALAT_CHANNEL_ID;\nconst NEXT_PUBLIC_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;\n\n\nconst nominationFormSchema = z.object({\n  category: z.string(),\n  nomineeName: z.string(),\n  nomineePhone: z.string(),\n  nominationReason: z.string(),\n  nominatorName: z.string(),\n  nominatorPhone: z.string(),\n});\n\nconst voteSchema = z.object({\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number().int().positive(),\n});\n\nconst wemaPaymentStatusSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n});\n\nconst wemaPaymentRequestSchema = z.object({\n  amount: z.number(),\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number(),\n});\n\nconst wemaPaymentValidationSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n  platformTransactionReference: z.string(),\n  otp: z.string(),\n});\n\nconst remitaPaymentRequestSchema = z.object({\n    amount: z.number(),\n    charge: z.number(),\n    transactionReference: z.string(),\n    customerEmail: z.string().email(),\n    customerName: z.string(),\n    customerPhoneNumber: z.string(),\n    description: z.string(),\n});\n\nconst remitaReceiptSchema = z.object({\n  rrr: z.string(),\n});\n\nconst remitaRrrValidationSchema = z.object({\n  rrr: z.string(),\n  channelId: z.string(),\n});\n\n\nexport async function sendNominationEmail(formData: z.infer<typeof nominationFormSchema>) {\n  \n  // 1. Validate the data on the server\n  const validatedFields = nominationFormSchema.safeParse(formData);\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid form data.',\n    };\n  }\n\n  const { category, nomineeName, nomineePhone, nominationReason, nominatorName, nominatorPhone } = validatedFields.data;\n\n  // 2. Log the data to the server console (this will work without any setup)\n  console.log('New Nomination Received:');\n  console.log({\n    category,\n    nomineeName,\n    nomineePhone,\n    nominationReason,\n    nominatorName,\n    nominatorPhone,\n  });\n\n  try {\n    return { success: true };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    return {\n      success: false,\n      error: 'Sorry, we couldn\\'t submit your nomination at this time.',\n    };\n  }\n}\n\nexport async function recordVote(voteData: z.infer<typeof voteSchema>) {\n  const validatedFields = voteSchema.safeParse(voteData);\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid vote data provided.',\n    };\n  }\n\n  try {\n    await addVote(validatedFields.data);\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to record vote in Server Action: \", error);\n    return {\n      success: false,\n      error: 'There was an error recording your vote to the database.'\n    };\n  }\n}\n\nexport async function createWemaAlatPayment(paymentData: z.infer<typeof wemaPaymentRequestSchema>) {\n  const validatedFields = wemaPaymentRequestSchema.safeParse(paymentData);\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid payment data provided.' };\n  }\n  \n  if (!WEMA_ALAT_SUBSCRIPTION_KEY || !WEMA_ALAT_SOURCE_ACCOUNT || !WEMA_ALAT_CHANNEL_ID) {\n    console.error(\"Wema Alat environment variables are not set.\");\n    return { success: false, error: \"Payment gateway is not configured correctly.\" };\n  }\n\n  const { amount, contestantId, contestantName, contestantCategory, numberOfVotes } = validatedFields.data;\n\n  const transactionReference = `SRF-VOTE-${contestantId}-${Date.now()}`;\n  const narration = `Vote for ${contestantName} in ${contestantCategory}`;\n\n  const body = {\n    amount: amount,\n    sourceAccountNumber: WEMA_ALAT_SOURCE_ACCOUNT,\n    channelId: WEMA_ALAT_CHANNEL_ID,\n    narration: narration,\n    transactionReference: transactionReference\n  };\n\n  try {\n    const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-request', {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n        'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n      }\n    });\n    \n    const responseText = await response.text();\n    console.log(\"Wema Alat transfer-fund-request response status:\", response.status);\n    console.log(\"Wema Alat transfer-fund-request response body:\", responseText);\n\n    if (response.ok) {\n        try {\n            const data = JSON.parse(responseText);\n            // Assuming the platformTransactionReference is in the response body.\n            // This may need to adjustment based on the actual API response structure.\n            return {\n                success: true,\n                message: \"Payment initiated. Please enter OTP.\",\n                data: {\n                    platformTransactionReference: data.platformTransactionReference, // Adjust this key based on actual response\n                    transactionReference: transactionReference,\n                    channelId: WEMA_ALAT_CHANNEL_ID,\n                }\n            };\n        } catch (e) {\n            console.error(\"Failed to parse JSON from Wema Alat response\", e);\n             return { success: false, error: \"Received an unreadable response from payment gateway.\" };\n        }\n    } else {\n       return { success: false, error: `Payment initiation failed: ${responseText}`, status: response.status };\n    }\n\n  } catch (error) {\n    console.error(\"Error calling Wema Alat API:\", error);\n    return { success: false, error: \"Could not connect to the payment gateway.\" };\n  }\n}\n\nexport async function validateWemaAlatPayment(validationData: z.infer<typeof wemaPaymentValidationSchema>) {\n    const validatedFields = wemaPaymentValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid validation data provided.' };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { channelId, transactionReference, platformTransactionReference, otp } = validatedFields.data;\n\n    const body = {\n        channelId,\n        transactionReference,\n        platformTransactionReference,\n        otp,\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-validation', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Wema Alat transfer-fund-validation response status:\", response.status);\n        console.log(\"Wema Alat transfer-fund-validation response body:\", responseText);\n        \n        if(response.ok) {\n            return { success: true, message: \"Payment validated successfully!\" };\n        } else {\n            return { success: false, error: `OTP validation failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Wema Alat validation API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway for validation.\" };\n    }\n}\n\n\nexport async function checkWemaAlatTransactionStatus(statusData: z.infer<typeof wemaPaymentStatusSchema>) {\n    const validatedFields = wemaPaymentStatusSchema.safeParse(statusData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid transaction data' };\n    }\n\n    const { channelId, transactionReference } = validatedFields.data;\n\n    const wemaAlatUrl = `https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/CheckTransactionStatus/${channelId}/${transactionReference}`;\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set in environment variables.\");\n        return { success: false, error: \"Payment gateway is not configured.\" };\n    }\n    \n    try {\n        const response = await fetch(wemaAlatUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const resultText = await response.text();\n        const resultStatus = response.status;\n        console.log('Wema Alat Status:', resultStatus);\n        console.log('Wema Alat Response:', resultText);\n\n        if (response.ok) {\n            // Assuming a 200 OK response means success. You might need to adjust based on the actual API response content.\n            return { success: true, status: resultStatus, data: resultText };\n        } else {\n            return { success: false, error: `Failed to check transaction status: ${resultText}`, status: resultStatus };\n        }\n\n    } catch (error) {\n        console.error(\"Error calling Wema Alat API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway.\" };\n    }\n}\n\n\nexport async function createRemitaPayment(paymentData: z.infer<typeof remitaPaymentRequestSchema>) {\n    const validatedFields = remitaPaymentRequestSchema.safeParse(paymentData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita payment data.\" };\n    }\n\n    // NOTE: This endpoint does not seem to require the Ocp-Apim-Subscription-Key based on the user's snippet.\n    // This may need to be adjusted.\n\n    const { amount, charge, transactionReference, customerEmail, customerName, customerPhoneNumber, description } = validatedFields.data;\n\n    // NOTE: Many fields are missing from the input and are hardcoded as placeholders.\n    // This function will need to be updated with real data.\n    const body = {\n        channelId: \"string\", // Placeholder\n        cif: \"string\", // Placeholder\n        customerAccount: \"string\", // Placeholder\n        amount: amount,\n        charge: charge,\n        transactionReference: transactionReference,\n        customerEmail: customerEmail,\n        customerPhoneNumber: customerPhoneNumber,\n        customerName: customerName,\n        rrr: \"string\", // Placeholder\n        payerEmail: customerEmail, // Assuming payer is the customer\n        payerName: customerName, // Assuming payer is the customer\n        payerNumber: customerPhoneNumber, // Assuming payer is the customer\n        description: description,\n        billAuthOptions: {\n            pin: \"string\", // Placeholder\n            otp: \"string\", // Placeholder\n            biometricPolicy: \"string\", // Placeholder\n            biometricToken: \"string\", // Placeholder\n            platformTransactionReference: \"string\", // Placeholder\n            authenticationType: 0 // Placeholder\n        }\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PayRemitaBill', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PayRemitaBill response status:\", response.status);\n        console.log(\"Remita PayRemitaBill response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita payment processed successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Remita payment failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PayRemitaBill API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway.\" };\n    }\n}\n\nexport async function printRemitaReceipt(receiptData: z.infer<typeof remitaReceiptSchema>) {\n    const validatedFields = remitaReceiptSchema.safeParse(receiptData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita receipt data.\" };\n    }\n\n    const { rrr } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PrintRemitaReceipt/${rrr}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PrintRemitaReceipt response status:\", response.status);\n        console.log(\"Remita PrintRemitaReceipt response body:\", responseText);\n        \n        if (response.ok) {\n            // Depending on what the API returns (e.g., HTML, a URL to a PDF),\n            // this response will need to be handled by the client.\n            // For now, we'll just return the text content.\n            return { success: true, receiptData: responseText };\n        } else {\n            return { success: false, error: `Failed to fetch Remita receipt: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PrintRemitaReceipt API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to print receipt.\" };\n    }\n}\n\n\nexport async function validateRemitaRrr(validationData: z.infer<typeof remitaRrrValidationSchema>) {\n    const validatedFields = remitaRrrValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita RRR validation data.\" };\n    }\n\n    const { rrr, channelId } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/ValidateRrr/${rrr}/${channelId}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita ValidateRrr response status:\", response.status);\n        console.log(\"Remita ValidateRrr response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita RRR validated successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Failed to validate Remita RRR: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita ValidateRrr API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to validate RRR.\" };\n    }\n}\n    "],"names":[],"mappings":";;;;;;IA8HsB,wBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { addVote } from '@/services/firestore';\n\n// Explicitly read environment variables at the top level\nconst WEMA_ALAT_SUBSCRIPTION_KEY = process.env.WEMA_ALAT_SUBSCRIPTION_KEY;\nconst WEMA_ALAT_SOURCE_ACCOUNT = process.env.WEMA_ALAT_SOURCE_ACCOUNT;\nconst WEMA_ALAT_CHANNEL_ID = process.env.WEMA_ALAT_CHANNEL_ID;\nconst NEXT_PUBLIC_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;\n\n\nconst nominationFormSchema = z.object({\n  category: z.string(),\n  nomineeName: z.string(),\n  nomineePhone: z.string(),\n  nominationReason: z.string(),\n  nominatorName: z.string(),\n  nominatorPhone: z.string(),\n});\n\nconst voteSchema = z.object({\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number().int().positive(),\n});\n\nconst wemaPaymentStatusSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n});\n\nconst wemaPaymentRequestSchema = z.object({\n  amount: z.number(),\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number(),\n});\n\nconst wemaPaymentValidationSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n  platformTransactionReference: z.string(),\n  otp: z.string(),\n});\n\nconst remitaPaymentRequestSchema = z.object({\n    amount: z.number(),\n    charge: z.number(),\n    transactionReference: z.string(),\n    customerEmail: z.string().email(),\n    customerName: z.string(),\n    customerPhoneNumber: z.string(),\n    description: z.string(),\n});\n\nconst remitaReceiptSchema = z.object({\n  rrr: z.string(),\n});\n\nconst remitaRrrValidationSchema = z.object({\n  rrr: z.string(),\n  channelId: z.string(),\n});\n\n\nexport async function sendNominationEmail(formData: z.infer<typeof nominationFormSchema>) {\n  \n  // 1. Validate the data on the server\n  const validatedFields = nominationFormSchema.safeParse(formData);\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid form data.',\n    };\n  }\n\n  const { category, nomineeName, nomineePhone, nominationReason, nominatorName, nominatorPhone } = validatedFields.data;\n\n  // 2. Log the data to the server console (this will work without any setup)\n  console.log('New Nomination Received:');\n  console.log({\n    category,\n    nomineeName,\n    nomineePhone,\n    nominationReason,\n    nominatorName,\n    nominatorPhone,\n  });\n\n  try {\n    return { success: true };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    return {\n      success: false,\n      error: 'Sorry, we couldn\\'t submit your nomination at this time.',\n    };\n  }\n}\n\nexport async function recordVote(voteData: z.infer<typeof voteSchema>) {\n  const validatedFields = voteSchema.safeParse(voteData);\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid vote data provided.',\n    };\n  }\n\n  try {\n    await addVote(validatedFields.data);\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to record vote in Server Action: \", error);\n    return {\n      success: false,\n      error: 'There was an error recording your vote to the database.'\n    };\n  }\n}\n\nexport async function createWemaAlatPayment(paymentData: z.infer<typeof wemaPaymentRequestSchema>) {\n  const validatedFields = wemaPaymentRequestSchema.safeParse(paymentData);\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid payment data provided.' };\n  }\n  \n  if (!WEMA_ALAT_SUBSCRIPTION_KEY || !WEMA_ALAT_SOURCE_ACCOUNT || !WEMA_ALAT_CHANNEL_ID) {\n    console.error(\"Wema Alat environment variables are not set.\");\n    return { success: false, error: \"Payment gateway is not configured correctly.\" };\n  }\n\n  const { amount, contestantId, contestantName, contestantCategory, numberOfVotes } = validatedFields.data;\n\n  const transactionReference = `SRF-VOTE-${contestantId}-${Date.now()}`;\n  const narration = `Vote for ${contestantName} in ${contestantCategory}`;\n\n  const body = {\n    amount: amount,\n    sourceAccountNumber: WEMA_ALAT_SOURCE_ACCOUNT,\n    channelId: WEMA_ALAT_CHANNEL_ID,\n    narration: narration,\n    transactionReference: transactionReference\n  };\n\n  try {\n    const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-request', {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n        'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n      }\n    });\n    \n    const responseText = await response.text();\n    console.log(\"Wema Alat transfer-fund-request response status:\", response.status);\n    console.log(\"Wema Alat transfer-fund-request response body:\", responseText);\n\n    if (response.ok) {\n        try {\n            const data = JSON.parse(responseText);\n            // Assuming the platformTransactionReference is in the response body.\n            // This may need to adjustment based on the actual API response structure.\n            return {\n                success: true,\n                message: \"Payment initiated. Please enter OTP.\",\n                data: {\n                    platformTransactionReference: data.platformTransactionReference, // Adjust this key based on actual response\n                    transactionReference: transactionReference,\n                    channelId: WEMA_ALAT_CHANNEL_ID,\n                }\n            };\n        } catch (e) {\n            console.error(\"Failed to parse JSON from Wema Alat response\", e);\n             return { success: false, error: \"Received an unreadable response from payment gateway.\" };\n        }\n    } else {\n       return { success: false, error: `Payment initiation failed: ${responseText}`, status: response.status };\n    }\n\n  } catch (error) {\n    console.error(\"Error calling Wema Alat API:\", error);\n    return { success: false, error: \"Could not connect to the payment gateway.\" };\n  }\n}\n\nexport async function validateWemaAlatPayment(validationData: z.infer<typeof wemaPaymentValidationSchema>) {\n    const validatedFields = wemaPaymentValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid validation data provided.' };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { channelId, transactionReference, platformTransactionReference, otp } = validatedFields.data;\n\n    const body = {\n        channelId,\n        transactionReference,\n        platformTransactionReference,\n        otp,\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-validation', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Wema Alat transfer-fund-validation response status:\", response.status);\n        console.log(\"Wema Alat transfer-fund-validation response body:\", responseText);\n        \n        if(response.ok) {\n            return { success: true, message: \"Payment validated successfully!\" };\n        } else {\n            return { success: false, error: `OTP validation failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Wema Alat validation API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway for validation.\" };\n    }\n}\n\n\nexport async function checkWemaAlatTransactionStatus(statusData: z.infer<typeof wemaPaymentStatusSchema>) {\n    const validatedFields = wemaPaymentStatusSchema.safeParse(statusData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid transaction data' };\n    }\n\n    const { channelId, transactionReference } = validatedFields.data;\n\n    const wemaAlatUrl = `https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/CheckTransactionStatus/${channelId}/${transactionReference}`;\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set in environment variables.\");\n        return { success: false, error: \"Payment gateway is not configured.\" };\n    }\n    \n    try {\n        const response = await fetch(wemaAlatUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const resultText = await response.text();\n        const resultStatus = response.status;\n        console.log('Wema Alat Status:', resultStatus);\n        console.log('Wema Alat Response:', resultText);\n\n        if (response.ok) {\n            // Assuming a 200 OK response means success. You might need to adjust based on the actual API response content.\n            return { success: true, status: resultStatus, data: resultText };\n        } else {\n            return { success: false, error: `Failed to check transaction status: ${resultText}`, status: resultStatus };\n        }\n\n    } catch (error) {\n        console.error(\"Error calling Wema Alat API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway.\" };\n    }\n}\n\n\nexport async function createRemitaPayment(paymentData: z.infer<typeof remitaPaymentRequestSchema>) {\n    const validatedFields = remitaPaymentRequestSchema.safeParse(paymentData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita payment data.\" };\n    }\n\n    // NOTE: This endpoint does not seem to require the Ocp-Apim-Subscription-Key based on the user's snippet.\n    // This may need to be adjusted.\n\n    const { amount, charge, transactionReference, customerEmail, customerName, customerPhoneNumber, description } = validatedFields.data;\n\n    // NOTE: Many fields are missing from the input and are hardcoded as placeholders.\n    // This function will need to be updated with real data.\n    const body = {\n        channelId: \"string\", // Placeholder\n        cif: \"string\", // Placeholder\n        customerAccount: \"string\", // Placeholder\n        amount: amount,\n        charge: charge,\n        transactionReference: transactionReference,\n        customerEmail: customerEmail,\n        customerPhoneNumber: customerPhoneNumber,\n        customerName: customerName,\n        rrr: \"string\", // Placeholder\n        payerEmail: customerEmail, // Assuming payer is the customer\n        payerName: customerName, // Assuming payer is the customer\n        payerNumber: customerPhoneNumber, // Assuming payer is the customer\n        description: description,\n        billAuthOptions: {\n            pin: \"string\", // Placeholder\n            otp: \"string\", // Placeholder\n            biometricPolicy: \"string\", // Placeholder\n            biometricToken: \"string\", // Placeholder\n            platformTransactionReference: \"string\", // Placeholder\n            authenticationType: 0 // Placeholder\n        }\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PayRemitaBill', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PayRemitaBill response status:\", response.status);\n        console.log(\"Remita PayRemitaBill response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita payment processed successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Remita payment failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PayRemitaBill API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway.\" };\n    }\n}\n\nexport async function printRemitaReceipt(receiptData: z.infer<typeof remitaReceiptSchema>) {\n    const validatedFields = remitaReceiptSchema.safeParse(receiptData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita receipt data.\" };\n    }\n\n    const { rrr } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PrintRemitaReceipt/${rrr}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PrintRemitaReceipt response status:\", response.status);\n        console.log(\"Remita PrintRemitaReceipt response body:\", responseText);\n        \n        if (response.ok) {\n            // Depending on what the API returns (e.g., HTML, a URL to a PDF),\n            // this response will need to be handled by the client.\n            // For now, we'll just return the text content.\n            return { success: true, receiptData: responseText };\n        } else {\n            return { success: false, error: `Failed to fetch Remita receipt: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PrintRemitaReceipt API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to print receipt.\" };\n    }\n}\n\n\nexport async function validateRemitaRrr(validationData: z.infer<typeof remitaRrrValidationSchema>) {\n    const validatedFields = remitaRrrValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita RRR validation data.\" };\n    }\n\n    const { rrr, channelId } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/ValidateRrr/${rrr}/${channelId}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita ValidateRrr response status:\", response.status);\n        console.log(\"Remita ValidateRrr response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita RRR validated successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Failed to validate Remita RRR: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita ValidateRrr API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to validate RRR.\" };\n    }\n}\n    "],"names":[],"mappings":";;;;;;IAwGsB,aAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { z } from 'zod';\nimport { addVote } from '@/services/firestore';\n\n// Explicitly read environment variables at the top level\nconst WEMA_ALAT_SUBSCRIPTION_KEY = process.env.WEMA_ALAT_SUBSCRIPTION_KEY;\nconst WEMA_ALAT_SOURCE_ACCOUNT = process.env.WEMA_ALAT_SOURCE_ACCOUNT;\nconst WEMA_ALAT_CHANNEL_ID = process.env.WEMA_ALAT_CHANNEL_ID;\nconst NEXT_PUBLIC_BASE_URL = process.env.NEXT_PUBLIC_BASE_URL;\n\n\nconst nominationFormSchema = z.object({\n  category: z.string(),\n  nomineeName: z.string(),\n  nomineePhone: z.string(),\n  nominationReason: z.string(),\n  nominatorName: z.string(),\n  nominatorPhone: z.string(),\n});\n\nconst voteSchema = z.object({\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number().int().positive(),\n});\n\nconst wemaPaymentStatusSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n});\n\nconst wemaPaymentRequestSchema = z.object({\n  amount: z.number(),\n  contestantId: z.string(),\n  contestantName: z.string(),\n  contestantCategory: z.string(),\n  numberOfVotes: z.number(),\n});\n\nconst wemaPaymentValidationSchema = z.object({\n  channelId: z.string(),\n  transactionReference: z.string(),\n  platformTransactionReference: z.string(),\n  otp: z.string(),\n});\n\nconst remitaPaymentRequestSchema = z.object({\n    amount: z.number(),\n    charge: z.number(),\n    transactionReference: z.string(),\n    customerEmail: z.string().email(),\n    customerName: z.string(),\n    customerPhoneNumber: z.string(),\n    description: z.string(),\n});\n\nconst remitaReceiptSchema = z.object({\n  rrr: z.string(),\n});\n\nconst remitaRrrValidationSchema = z.object({\n  rrr: z.string(),\n  channelId: z.string(),\n});\n\n\nexport async function sendNominationEmail(formData: z.infer<typeof nominationFormSchema>) {\n  \n  // 1. Validate the data on the server\n  const validatedFields = nominationFormSchema.safeParse(formData);\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid form data.',\n    };\n  }\n\n  const { category, nomineeName, nomineePhone, nominationReason, nominatorName, nominatorPhone } = validatedFields.data;\n\n  // 2. Log the data to the server console (this will work without any setup)\n  console.log('New Nomination Received:');\n  console.log({\n    category,\n    nomineeName,\n    nomineePhone,\n    nominationReason,\n    nominatorName,\n    nominatorPhone,\n  });\n\n  try {\n    return { success: true };\n  } catch (error) {\n    console.error('Email sending failed:', error);\n    return {\n      success: false,\n      error: 'Sorry, we couldn\\'t submit your nomination at this time.',\n    };\n  }\n}\n\nexport async function recordVote(voteData: z.infer<typeof voteSchema>) {\n  const validatedFields = voteSchema.safeParse(voteData);\n\n  if (!validatedFields.success) {\n    return {\n      success: false,\n      error: 'Invalid vote data provided.',\n    };\n  }\n\n  try {\n    await addVote(validatedFields.data);\n    return { success: true };\n  } catch (error) {\n    console.error(\"Failed to record vote in Server Action: \", error);\n    return {\n      success: false,\n      error: 'There was an error recording your vote to the database.'\n    };\n  }\n}\n\nexport async function createWemaAlatPayment(paymentData: z.infer<typeof wemaPaymentRequestSchema>) {\n  const validatedFields = wemaPaymentRequestSchema.safeParse(paymentData);\n  if (!validatedFields.success) {\n    return { success: false, error: 'Invalid payment data provided.' };\n  }\n  \n  if (!WEMA_ALAT_SUBSCRIPTION_KEY || !WEMA_ALAT_SOURCE_ACCOUNT || !WEMA_ALAT_CHANNEL_ID) {\n    console.error(\"Wema Alat environment variables are not set.\");\n    return { success: false, error: \"Payment gateway is not configured correctly.\" };\n  }\n\n  const { amount, contestantId, contestantName, contestantCategory, numberOfVotes } = validatedFields.data;\n\n  const transactionReference = `SRF-VOTE-${contestantId}-${Date.now()}`;\n  const narration = `Vote for ${contestantName} in ${contestantCategory}`;\n\n  const body = {\n    amount: amount,\n    sourceAccountNumber: WEMA_ALAT_SOURCE_ACCOUNT,\n    channelId: WEMA_ALAT_CHANNEL_ID,\n    narration: narration,\n    transactionReference: transactionReference\n  };\n\n  try {\n    const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-request', {\n      method: 'POST',\n      body: JSON.stringify(body),\n      headers: {\n        'Content-Type': 'application/json',\n        'Cache-Control': 'no-cache',\n        'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n      }\n    });\n    \n    const responseText = await response.text();\n    console.log(\"Wema Alat transfer-fund-request response status:\", response.status);\n    console.log(\"Wema Alat transfer-fund-request response body:\", responseText);\n\n    if (response.ok) {\n        try {\n            const data = JSON.parse(responseText);\n            // Assuming the platformTransactionReference is in the response body.\n            // This may need to adjustment based on the actual API response structure.\n            return {\n                success: true,\n                message: \"Payment initiated. Please enter OTP.\",\n                data: {\n                    platformTransactionReference: data.platformTransactionReference, // Adjust this key based on actual response\n                    transactionReference: transactionReference,\n                    channelId: WEMA_ALAT_CHANNEL_ID,\n                }\n            };\n        } catch (e) {\n            console.error(\"Failed to parse JSON from Wema Alat response\", e);\n             return { success: false, error: \"Received an unreadable response from payment gateway.\" };\n        }\n    } else {\n       return { success: false, error: `Payment initiation failed: ${responseText}`, status: response.status };\n    }\n\n  } catch (error) {\n    console.error(\"Error calling Wema Alat API:\", error);\n    return { success: false, error: \"Could not connect to the payment gateway.\" };\n  }\n}\n\nexport async function validateWemaAlatPayment(validationData: z.infer<typeof wemaPaymentValidationSchema>) {\n    const validatedFields = wemaPaymentValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid validation data provided.' };\n    }\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set.\");\n        return { success: false, error: \"Payment gateway is not configured correctly.\" };\n    }\n\n    const { channelId, transactionReference, platformTransactionReference, otp } = validatedFields.data;\n\n    const body = {\n        channelId,\n        transactionReference,\n        platformTransactionReference,\n        otp,\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/transfer-fund-validation', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Wema Alat transfer-fund-validation response status:\", response.status);\n        console.log(\"Wema Alat transfer-fund-validation response body:\", responseText);\n        \n        if(response.ok) {\n            return { success: true, message: \"Payment validated successfully!\" };\n        } else {\n            return { success: false, error: `OTP validation failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Wema Alat validation API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway for validation.\" };\n    }\n}\n\n\nexport async function checkWemaAlatTransactionStatus(statusData: z.infer<typeof wemaPaymentStatusSchema>) {\n    const validatedFields = wemaPaymentStatusSchema.safeParse(statusData);\n    if (!validatedFields.success) {\n        return { success: false, error: 'Invalid transaction data' };\n    }\n\n    const { channelId, transactionReference } = validatedFields.data;\n\n    const wemaAlatUrl = `https://wema-alatdev-apimgt.azure-api.net/alat-pay/api/EcommerceTransfer/CheckTransactionStatus/${channelId}/${transactionReference}`;\n\n    if (!WEMA_ALAT_SUBSCRIPTION_KEY) {\n        console.error(\"Wema Alat subscription key is not set in environment variables.\");\n        return { success: false, error: \"Payment gateway is not configured.\" };\n    }\n    \n    try {\n        const response = await fetch(wemaAlatUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n                'Ocp-Apim-Subscription-Key': WEMA_ALAT_SUBSCRIPTION_KEY,\n            }\n        });\n\n        const resultText = await response.text();\n        const resultStatus = response.status;\n        console.log('Wema Alat Status:', resultStatus);\n        console.log('Wema Alat Response:', resultText);\n\n        if (response.ok) {\n            // Assuming a 200 OK response means success. You might need to adjust based on the actual API response content.\n            return { success: true, status: resultStatus, data: resultText };\n        } else {\n            return { success: false, error: `Failed to check transaction status: ${resultText}`, status: resultStatus };\n        }\n\n    } catch (error) {\n        console.error(\"Error calling Wema Alat API:\", error);\n        return { success: false, error: \"Could not connect to the payment gateway.\" };\n    }\n}\n\n\nexport async function createRemitaPayment(paymentData: z.infer<typeof remitaPaymentRequestSchema>) {\n    const validatedFields = remitaPaymentRequestSchema.safeParse(paymentData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita payment data.\" };\n    }\n\n    // NOTE: This endpoint does not seem to require the Ocp-Apim-Subscription-Key based on the user's snippet.\n    // This may need to be adjusted.\n\n    const { amount, charge, transactionReference, customerEmail, customerName, customerPhoneNumber, description } = validatedFields.data;\n\n    // NOTE: Many fields are missing from the input and are hardcoded as placeholders.\n    // This function will need to be updated with real data.\n    const body = {\n        channelId: \"string\", // Placeholder\n        cif: \"string\", // Placeholder\n        customerAccount: \"string\", // Placeholder\n        amount: amount,\n        charge: charge,\n        transactionReference: transactionReference,\n        customerEmail: customerEmail,\n        customerPhoneNumber: customerPhoneNumber,\n        customerName: customerName,\n        rrr: \"string\", // Placeholder\n        payerEmail: customerEmail, // Assuming payer is the customer\n        payerName: customerName, // Assuming payer is the customer\n        payerNumber: customerPhoneNumber, // Assuming payer is the customer\n        description: description,\n        billAuthOptions: {\n            pin: \"string\", // Placeholder\n            otp: \"string\", // Placeholder\n            biometricPolicy: \"string\", // Placeholder\n            biometricToken: \"string\", // Placeholder\n            platformTransactionReference: \"string\", // Placeholder\n            authenticationType: 0 // Placeholder\n        }\n    };\n\n    try {\n        const response = await fetch('https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PayRemitaBill', {\n            method: 'POST',\n            body: JSON.stringify(body),\n            headers: {\n                'Content-Type': 'application/json',\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PayRemitaBill response status:\", response.status);\n        console.log(\"Remita PayRemitaBill response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita payment processed successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Remita payment failed: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PayRemitaBill API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway.\" };\n    }\n}\n\nexport async function printRemitaReceipt(receiptData: z.infer<typeof remitaReceiptSchema>) {\n    const validatedFields = remitaReceiptSchema.safeParse(receiptData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita receipt data.\" };\n    }\n\n    const { rrr } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/PrintRemitaReceipt/${rrr}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita PrintRemitaReceipt response status:\", response.status);\n        console.log(\"Remita PrintRemitaReceipt response body:\", responseText);\n        \n        if (response.ok) {\n            // Depending on what the API returns (e.g., HTML, a URL to a PDF),\n            // this response will need to be handled by the client.\n            // For now, we'll just return the text content.\n            return { success: true, receiptData: responseText };\n        } else {\n            return { success: false, error: `Failed to fetch Remita receipt: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita PrintRemitaReceipt API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to print receipt.\" };\n    }\n}\n\n\nexport async function validateRemitaRrr(validationData: z.infer<typeof remitaRrrValidationSchema>) {\n    const validatedFields = remitaRrrValidationSchema.safeParse(validationData);\n    if (!validatedFields.success) {\n        return { success: false, error: \"Invalid Remita RRR validation data.\" };\n    }\n\n    const { rrr, channelId } = validatedFields.data;\n\n    const remitaUrl = `https://wema-alatdev-apimgt.azure-api.net/remita-payments/api/RemitaPayment/ValidateRrr/${rrr}/${channelId}`;\n\n    try {\n        const response = await fetch(remitaUrl, {\n            method: 'GET',\n            headers: {\n                'Cache-Control': 'no-cache',\n            }\n        });\n\n        const responseText = await response.text();\n        console.log(\"Remita ValidateRrr response status:\", response.status);\n        console.log(\"Remita ValidateRrr response body:\", responseText);\n        \n        if (response.ok) {\n            return { success: true, message: \"Remita RRR validated successfully.\", data: JSON.parse(responseText) };\n        } else {\n            return { success: false, error: `Failed to validate Remita RRR: ${responseText}` };\n        }\n\n    } catch(error) {\n        console.error(\"Error calling Remita ValidateRrr API:\", error);\n        return { success: false, error: \"Could not connect to the Remita payment gateway to validate RRR.\" };\n    }\n}\n    "],"names":[],"mappings":";;;;;;IAiMsB,0BAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 127, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/checkout/page.tsx"],"sourcesContent":["\n\n\"use client\";\n\nimport { Suspense, useTransition, useState } from 'react';\nimport Image from 'next/image';\nimport { useSearchParams, useRouter } from 'next/navigation';\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft, Loader2, CheckCircle, ShieldCheck } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\nimport Link from 'next/link';\nimport { createWemaAlatPayment, recordVote, validateWemaAlatPayment } from '@/app/actions';\nimport { Input } from '@/components/ui/input';\n\nconst VOTE_COST_PER_VOTE = 100;\n\ninterface PaymentData {\n    platformTransactionReference: string;\n    transactionReference: string;\n    channelId: string;\n}\n\nfunction CheckoutView() {\n    const searchParams = useSearchParams();\n    const router = useRouter();\n    const { toast } = useToast();\n    const [isPending, startTransition] = useTransition();\n    const [isConfirmingOtp, startOtpTransition] = useTransition();\n\n    const [view, setView] = useState<'confirm' | 'otp' | 'success'>('confirm');\n    const [otp, setOtp] = useState('');\n    const [paymentData, setPaymentData] = useState<PaymentData | null>(null);\n\n    const contestantId = searchParams.get('id');\n    const contestantName = searchParams.get('name') || 'the selected contestant';\n    const contestantCategory = searchParams.get('category') || 'their category';\n    const numberOfVotes = parseInt(searchParams.get('votes') || '1', 10);\n    const totalVoteCost = VOTE_COST_PER_VOTE * (numberOfVotes - (\n        numberOfVotes === 12 ? 2 :\n        numberOfVotes === 53 ? 3 :\n        numberOfVotes === 105 ? 5 :\n        numberOfVotes === 510 ? 10 :\n        numberOfVotes === 1020 ? 20 : 0\n    ));\n\n    const contestantImage = `https://placehold.co/400x500.png?text=${encodeURIComponent(contestantName.split(' ').map(n => n[0]).join(''))}`;\n    \n    const handleInitialPayment = () => {\n        if (!contestantId) return;\n\n        startTransition(async () => {\n            const result = await createWemaAlatPayment({\n                amount: totalVoteCost,\n                contestantId,\n                contestantName,\n                contestantCategory,\n                numberOfVotes,\n            });\n\n            if (result.success && result.data) {\n                toast({\n                    title: \"Awaiting Confirmation\",\n                    description: \"Please enter the OTP sent to you to complete the vote.\",\n                });\n                setPaymentData(result.data);\n                setView('otp');\n            } else {\n                 toast({\n                    title: \"Payment Error\",\n                    description: result.error || \"Could not process payment. Please try again.\",\n                    variant: \"destructive\",\n                });\n            }\n        });\n    };\n\n    const handleOtpValidation = () => {\n        if (!paymentData || !otp || !contestantId) return;\n\n        startOtpTransition(async () => {\n            const validationResult = await validateWemaAlatPayment({\n                ...paymentData,\n                otp,\n            });\n            \n            if (validationResult.success) {\n                 // After successful OTP validation, record the vote\n                 const voteRecordResult = await recordVote({ contestantId, contestantName, contestantCategory, numberOfVotes });\n                 if (voteRecordResult.success) {\n                    toast({\n                        title: \"Vote Successful!\",\n                        description: \"Your payment has been processed and your vote has been recorded.\",\n                    });\n                    setView('success');\n                 } else {\n                    toast({\n                        title: \"Vote Recording Failed\",\n                        description: voteRecordResult.error || \"Payment was successful but we couldn't save your vote. Please contact support.\",\n                        variant: \"destructive\"\n                    });\n                 }\n            } else {\n                toast({\n                    title: \"OTP Validation Failed\",\n                    description: validationResult.error || \"The OTP you entered is incorrect. Please try again.\",\n                    variant: \"destructive\"\n                });\n            }\n        });\n    }\n\n    if (!contestantId) {\n        return (\n            <div className=\"text-center text-white\">\n                <h2 className=\"text-2xl font-bold text-amber-400\">Invalid Selection</h2>\n                <p className=\"text-zinc-300 mt-2\">No contestant was selected. Please go back and choose a nominee to vote for.</p>\n                <Button asChild className=\"mt-6 bg-amber-500 text-black hover:bg-amber-400\">\n                    <Link href=\"/vote\">\n                        <ArrowLeft className=\"mr-2 h-4 w-4\" /> Go Back to Vote\n                    </Link>\n                </Button>\n            </div>\n        );\n    }\n    \n    if (view === 'success') {\n      return (\n        <Card className=\"bg-zinc-900/50 border-green-400/30 text-white shadow-2xl shadow-green-500/10 text-center\">\n            <CardHeader>\n                <div className=\"mx-auto bg-green-500 text-black rounded-full h-16 w-16 flex items-center justify-center mb-4\">\n                    <CheckCircle className=\"h-10 w-10\" />\n                </div>\n                <CardTitle className=\"font-headline text-3xl text-green-400\">Payment Successful!</CardTitle>\n                <CardDescription className=\"text-zinc-300\">Your vote for <span className=\"font-bold text-white\">{contestantName}</span> has been confirmed.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                 <p className=\"text-zinc-400 mb-6\">Thank you for participating in the SR Fitness Awards!</p>\n                 <Button asChild className=\"bg-amber-500 text-black hover:bg-amber-400\">\n                    <Link href=\"/vote\">\n                        Vote Again\n                    </Link>\n                </Button>\n            </CardContent>\n        </Card>\n      )\n    }\n\n     if (view === 'otp') {\n        return (\n            <Card className=\"bg-zinc-900/50 border-amber-400/30 text-white shadow-2xl shadow-amber-500/10\">\n                <CardHeader>\n                     <div className=\"mx-auto bg-amber-500 text-black rounded-full h-16 w-16 flex items-center justify-center mb-4\">\n                        <ShieldCheck className=\"h-10 w-10\" />\n                    </div>\n                    <CardTitle className=\"font-headline text-3xl text-amber-400 text-center\">Enter Your OTP</CardTitle>\n                    <CardDescription className=\"text-zinc-400 text-center\">A One-Time Password has been sent to you. Please enter it below to complete your transaction.</CardDescription>\n                </CardHeader>\n                <CardContent>\n                    <Input\n                        type=\"text\"\n                        placeholder=\"Enter OTP\"\n                        value={otp}\n                        onChange={(e) => setOtp(e.target.value)}\n                        className=\"bg-zinc-800 border-zinc-700 focus:ring-amber-400 text-center text-lg h-12\"\n                        maxLength={6}\n                    />\n                </CardContent>\n                <CardFooter>\n                    <Button\n                        size=\"lg\"\n                        className=\"w-full mt-4 bg-amber-500 text-black font-bold text-lg hover:bg-amber-400 disabled:bg-zinc-600\"\n                        onClick={handleOtpValidation}\n                        disabled={isConfirmingOtp || otp.length < 4}\n                    >\n                        {isConfirmingOtp ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                        {isConfirmingOtp ? 'Confirming...' : 'Validate & Complete Vote'}\n                    </Button>\n                </CardFooter>\n            </Card>\n        )\n    }\n\n\n    return (\n        <Card className=\"bg-zinc-900/50 border-amber-400/30 text-white shadow-2xl shadow-amber-500/10\">\n            <CardHeader>\n                <CardTitle className=\"font-headline text-3xl text-amber-400\">Confirm Your Vote</CardTitle>\n                <CardDescription className=\"text-zinc-400\">Please review the details below before proceeding.</CardDescription>\n            </CardHeader>\n            <CardContent>\n                <div className=\"flex items-center space-x-4\">\n                    <Image src={contestantImage} alt={contestantName} width={100} height={125} className=\"rounded-lg border-2 border-amber-400/50\" />\n                    <div>\n                        <h3 className=\"text-2xl font-bold text-white\">{contestantName}</h3>\n                        <p className=\"text-amber-300\">{contestantCategory}</p>\n                        <p className=\"text-sm text-zinc-300 mt-1\">Number of Votes: <span className=\"font-bold\">{numberOfVotes}</span></p>\n                    </div>\n                </div>\n                <div className=\"mt-6 border-t border-zinc-700 pt-4 flex justify-between items-center text-xl\">\n                    <span className=\"text-zinc-300\">Total Cost:</span>\n                    <span className=\"font-bold text-amber-400\">N{totalVoteCost.toFixed(2)}</span>\n                </div>\n                <div className=\"mt-8 text-center\">\n                    <Button\n                        size=\"lg\"\n                        className=\"w-full mt-6 bg-amber-500 text-black font-bold text-lg hover:bg-amber-400 disabled:bg-zinc-600 disabled:text-zinc-400 disabled:cursor-not-allowed transition-all duration-300 transform hover:scale-105\"\n                        onClick={handleInitialPayment}\n                        disabled={isPending}\n                    >\n                         {isPending ? <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" /> : null}\n                         {isPending ? 'Processing Payment...' : 'Confirm & Pay'}\n                    </Button>\n                    <p className=\"text-xs text-zinc-500 mt-4 text-center\">\n                        You will be asked to enter an OTP in the next step.\n                    </p>\n                </div>\n            </CardContent>\n        </Card>\n    );\n}\n\nexport default function CheckoutPage() {\n    return (\n        <div className=\"bg-black text-white min-h-screen\" style={{\n            backgroundImage: `url('/black-bg.jpeg')`,\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundAttachment: 'fixed',\n        }}>\n            <div className=\"bg-black/80 backdrop-blur-sm min-h-screen flex items-center justify-center\">\n                <div className=\"container mx-auto px-4 sm:px-6 lg:px-8 py-16 md:py-24\">\n                     <header className=\"text-center mb-12\">\n                        <Image src=\"/SR.jpg\" alt=\"SR Fitness Awards Logo\" width={96} height={96} className=\"h-24 w-24 mx-auto mb-4 rounded-full\" data-ai-hint=\"awards logo\" />\n                        <h1 className=\"font-headline text-5xl text-amber-400\">Vote Checkout</h1>\n                    </header>\n                    <main>\n                      <Suspense fallback={<div className=\"text-center text-white\">Loading...</div>}>\n                        <CheckoutView />\n                      </Suspense>\n                    </main>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n    "],"names":[],"mappings":"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","debugId":null}}]
}